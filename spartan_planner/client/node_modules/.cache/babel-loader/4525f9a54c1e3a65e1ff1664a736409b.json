{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport InsertModal from './InsertModal';\nimport DeleteModal from './DeleteModal';\nimport UpdateModal from './UpdateModal';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragStart = () => {\n      /*\n      document.body.style.color = 'Orange'\n      document.body.style.transition = 'background-color 0.3s ease'\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\n      const {destination} = update;\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n      */\n    };\n\n    this.insertOnClick = () => {\n      console.log(\"insert is clicked\");\n      const newState = { ...this.state,\n        insertIsClicked: true\n      };\n      this.setState(newState, () => {\n        console.log(\"insertClicked Update \", this.state);\n      });\n    };\n\n    this.updateOnClick = () => {\n      alert(\"update\");\n    };\n\n    this.deleteOnClick = () => {\n      alert(\"delete\");\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      console.log(\"destination\", destination);\n      console.log(\"source\", source);\n      console.log(\"draggableId\", draggableId);\n      console.log(\"\\n\\n\");\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      console.log(\"start\", start);\n      console.log(\"finish\", finish);\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      console.log(\"hit\");\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n\n    this.state = initialData;\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    console.log(\"state\", this.state);\n    const newState = { ...this.state\n    };\n    this.setState(newState, () => {\n      console.log(\"updated State\", this.state);\n    });\n    axios.get('http://localhost:5000/api/courses').then(function (response) {\n      // handle success\n      console.log(\"courses api: \", response.data);\n      console.log(\"task\", this.state.task);\n      let requirementsCourses = [];\n      response.data[0].map(course => {});\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    }).then(function () {// always executed\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            console.log(\"theIdNum\", theIdNum);\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            console.log(\"theIdNum\", theIdNum);\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(InsertModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(UpdateModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 255,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","InsertModal","DeleteModal","UpdateModal","styled","DragDropContext","axios","Container","div","App","Component","constructor","props","onDragStart","onDragUpdate","update","insertOnClick","console","log","newState","state","insertIsClicked","setState","updateOnClick","alert","deleteOnClick","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","id","startTaskIds","newStart","finishTaskIds","newFinish","componentDidMount","get","then","response","data","task","requirementsCourses","map","course","catch","error","columnOrder","columnId","theIdNum","match","parseInt","join","column","tasks","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport InsertModal from './InsertModal'\nimport DeleteModal from './DeleteModal'\nimport UpdateModal from './UpdateModal'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\nimport axios from 'axios'\n\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = initialData;\n  }\n\n\n  componentDidMount(){\n    console.log(\"componentDidMount\")\n    console.log(\"state\",this.state)\n    const newState  = {\n      ...this.state,\n    }\n    \n    this.setState(newState,()=>{\n      console.log(\"updated State\",this.state )\n    })\n\n  \n    axios.get('http://localhost:5000/api/courses')\n    .then(function (response) {\n      // handle success\n      console.log(\"courses api: \", response.data);\n      console.log(\"task\", this.state.task)\n      let requirementsCourses = []\n      response.data[0].map((course)=>{\n      }) \n      \n\n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n\n\n    console.log(this.state)\n  }\n\n\n  \n  \n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n  insertOnClick = () =>{\n    console.log(\"insert is clicked\")\n    const newState ={\n      ...this.state,\n      insertIsClicked:true\n    }\n    this.setState(newState,()=>{\n      console.log(\"insertClicked Update \", this.state)\n    })\n\n\n    \n  }\n\n  updateOnClick = () =>{\n    alert(\"update\")\n  }\n\n\n  deleteOnClick = () =>{\n    alert(\"delete\")\n  }\n\n\n  onDragEnd = result =>{\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    \n\n    if(!destination){\n      \n      return;\n      \n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <div>\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum <= 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <Container>\n        <InsertModal></InsertModal>\n        <DeleteModal></DeleteModal>\n        <UpdateModal></UpdateModal>\n       \n        </Container>\n      \n      </DragDropContext>\n\n     \n      </div>\n      \n\n    \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */"]},"metadata":{},"sourceType":"module"}