{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragStart = () => {\n      document.body.style.color = 'Orange';\n    };\n\n    this.onDragUpdate = update => {\n      const {\n        destination\n      } = update;\n      const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`;\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      document.body.style.color = 'inherit';\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...column,\n        taskIds: newTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: this.onDragStart,\n      onDragEnd: this.onDragEnd,\n      children: this.state.columnOrder.map(columnId => {\n        const column = this.state.columns[columnId];\n        const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: column,\n          tasks: tasks\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 76,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","DragDropContext","App","Component","state","onDragStart","document","body","style","color","onDragUpdate","update","destination","opacity","index","Object","keys","tasks","length","backgroundColor","onDragEnd","result","source","draggableId","column","columns","droppableId","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","columnOrder","map","columnId","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport {DragDropContext} from 'react-beautiful-dnd'\n\nclass App extends React.Component{\n  state = initialData;\n\n  onDragStart = () =>{\n    document.body.style.color = 'Orange'\n  }\n\n  onDragUpdate = update =>{\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n  }\n\n  onDragEnd = result =>{\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    \n\n    if(!destination){\n      return;\n    }\n\n    if(destination.draggableId === source.draggableId && destination.index === source.index){\n      return;\n    }\n\n    const column = this.state.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...column,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <DragDropContext  \n\n        onDragStart={this.onDragStart}\n        onDragEnd={this.onDragEnd}\n      >\n        {this.state.columnOrder.map((columnId)=>{\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n\n          return <Column key={column.id} column={column} tasks={tasks}/>\n        })}\n      </DragDropContext>\n      \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"]},"metadata":{},"sourceType":"module"}