{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport InsertModal from './InsertModal';\nimport DeleteModal from './DeleteModal';\nimport UpdateModal from './UpdateModal';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragStart = () => {\n      /*\n      document.body.style.color = 'Orange'\n      document.body.style.transition = 'background-color 0.3s ease'\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\n      const {destination} = update;\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n      */\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      console.log(\"destination\", destination);\n      console.log(\"source\", source);\n      console.log(\"draggableId\", draggableId);\n      console.log(\"\\n\\n\");\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      console.log(\"start\", start);\n      console.log(\"finish\", finish);\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      console.log(\"hit\");\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n\n    this.state = initialData;\n    console.log(initialData);\n  }\n\n  componentDidMount() {\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState = { ...this.state\n    };\n    let requirementsCourses = null;\n    let courseNames = [];\n    axios.get('http://localhost:5000/api/courses').then(response => {\n      // handle success\n      //console.log(\"courses api: \", response.data);\n      //console.log(\"task\",newState.tasks)\n      response.data[0].map(item => {\n        //console.log(item.course)\n        const course = item.course;\n        courseNames.push(course);\n        const obj = new Object();\n        obj.id = item.course;\n        obj.content = item.course;\n        requirementsCourses = { ...requirementsCourses,\n          [course]: obj\n        }; //console.log(requirementsCourses)\n      }); //console.log(\"requirmentObj: \", requirementsCourses)\n      //newState.tasks = Object.assign({},requirementsCourses)\n\n      const columnObj = {\n        \"id\": \"column-1\",\n        \"title\": \"Requirements\",\n        \"tasksIds\": courseNames\n      };\n      newState.columns['column-1'] = columnObj;\n      newState.tasks = requirementsCourses; //console.log(\"columns\",newState.columns['column-1'])\n\n      console.log(\"newState\", newState);\n      /* this.setState(newState,()=>{\n        console.log(\"update complete\", this.state)\n      }) */\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(InsertModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(UpdateModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 274,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","InsertModal","DeleteModal","UpdateModal","styled","DragDropContext","axios","Container","div","App","Component","constructor","props","onDragStart","onDragUpdate","update","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","console","log","droppableId","index","start","state","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","componentDidMount","requirementsCourses","courseNames","get","then","response","data","map","item","course","push","obj","Object","content","columnObj","tasks","catch","error","columnOrder","columnId","theIdNum","match","parseInt","join","column","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport InsertModal from './InsertModal'\nimport DeleteModal from './DeleteModal'\nimport UpdateModal from './UpdateModal'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\nimport axios from 'axios'\n\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = initialData;\n    console.log(initialData)\n  }\n\n\n  componentDidMount(){\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState  = {\n      ...this.state,\n    }\n\n\n    let requirementsCourses = null\n    let courseNames = []  \n    \n    axios.get('http://localhost:5000/api/courses')\n    .then((response) => {\n      // handle success\n      //console.log(\"courses api: \", response.data);\n      //console.log(\"task\",newState.tasks)\n      \n      response.data[0].map((item)=>{\n        //console.log(item.course)\n        const course = item.course\n        courseNames.push(course)\n        const obj = new Object()\n        obj.id = item.course\n        obj.content = item.course\n\n        \n\n        \n        \n        requirementsCourses ={\n          ...requirementsCourses,\n          [course]:obj\n          \n        }\n        //console.log(requirementsCourses)\n\n\n      })\n      //console.log(\"requirmentObj: \", requirementsCourses)\n      \n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj = {\n        \"id\":\"column-1\",\n        \"title\":\"Requirements\",\n        \"tasksIds\" : courseNames\n      }\n      newState.columns['column-1'] = columnObj\n      newState.tasks = requirementsCourses\n\n      //console.log(\"columns\",newState.columns['column-1'])\n      \n      console.log(\"newState\",newState)\n\n      \n      /* this.setState(newState,()=>{\n        console.log(\"update complete\", this.state)\n      }) */\n      \n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n\n    \n\n    \n        \n  }\n\n\n  \n  \n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n\n\n  onDragEnd = result =>{\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    \n\n    if(!destination){\n      \n      return;\n      \n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <div>\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum <= 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <Container>\n        <InsertModal></InsertModal>\n        <DeleteModal></DeleteModal>\n        <UpdateModal></UpdateModal>\n       \n        </Container>\n      \n      </DragDropContext>\n\n     \n      </div>\n      \n\n    \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */"]},"metadata":{},"sourceType":"module"}