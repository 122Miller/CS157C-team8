{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = initialData;\n\n    this.onDragStart = () => {\n      /*\n      document.body.style.color = 'Orange'\n      document.body.style.transition = 'background-color 0.3s ease'\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\n      const {destination} = update;\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n      */\n    };\n\n    this.onDragEnd = result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      const startTaskIds = Array.from(start.taskId);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate,\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          return /*#__PURE__*/_jsxDEV(Column, {\n            column: column,\n            tasks: tasks\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 125,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","styled","DragDropContext","Container","div","App","Component","state","onDragStart","onDragUpdate","update","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","index","start","columns","droppableId","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","taskId","newStart","finishTaskIds","newFinish","columnOrder","map","columnId","column","tasks","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,MAAnB,QAAiC,WAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,eAAR,QAA8B,qBAA9B;;AAGA,MAAMC,SAAS,GAAGF,MAAM,CAACG,GAAI;AAC7B;AACA,CAFA;KAAMD,S;;AAIN,MAAME,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAC/BC,KAD+B,GACvBR,WADuB;;AAAA,SAG/BS,WAH+B,GAGjB,MAAK;AACjB;AACJ;AACA;AACA;AACG,KAR8B;;AAAA,SAU/BC,YAV+B,GAUhBC,MAAM,IAAG;AACtB;AACJ;AACA;AACA;AACA;AACG,KAhB8B;;AAAA,SAkB/BC,SAlB+B,GAkBnBC,MAAM,IAAG;AACnB,YAAM;AAACC,QAAAA,WAAD;AAAcC,QAAAA,MAAd;AAAsBC,QAAAA;AAAtB,UAAqCH,MAA3C;AACAI,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,SAA5B;AACAH,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBE,eAApB,GAAsC,SAAtC;;AAIA,UAAG,CAACP,WAAJ,EAAgB;AACd;AACD;;AAED,UAAGA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACQ,KAAZ,KAAsBP,MAAM,CAACO,KAAlF,EAAwF;AACtF;AACD;;AAED,YAAMC,KAAK,GAAG,KAAKf,KAAL,CAAWgB,OAAX,CAAmBT,MAAM,CAACU,WAA1B,CAAd;AACA,YAAMC,MAAM,GAAG,KAAKlB,KAAL,CAAWgB,OAAX,CAAmBV,WAAW,CAACW,WAA/B,CAAf;;AAEA,UAAGF,KAAK,KAAKG,MAAb,EAAoB;AACpB,cAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,OAAjB,CAAnB;AACAH,QAAAA,UAAU,CAACI,MAAX,CAAkBhB,MAAM,CAACO,KAAzB,EAA+B,CAA/B;AACAK,QAAAA,UAAU,CAACI,MAAX,CAAkBjB,WAAW,CAACQ,KAA9B,EAAoC,CAApC,EAAsCN,WAAtC;AAEA,cAAMgB,SAAS,GAAC,EACd,GAAGT,KADW;AAEdO,UAAAA,OAAO,EAACH;AAFM,SAAhB;AAKA,cAAMM,QAAQ,GAAC,EACb,GAAG,KAAKzB,KADK;AAEbgB,UAAAA,OAAO,EAAC,EACN,GAAG,KAAKhB,KAAL,CAAWgB,OADR;AAEN,aAACQ,SAAS,CAACE,EAAX,GAAgBF;AAFV;AAFK,SAAf;AAQA,aAAKG,QAAL,CAAcF,QAAd;AACA;AACA,OAtCmB,CAyCnB;;;AACA,YAAMG,YAAY,GAAGR,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACc,MAAjB,CAArB;AACAD,MAAAA,YAAY,CAACL,MAAb,CAAoBhB,MAAM,CAACO,KAA3B,EAAkC,CAAlC;AACA,YAAMgB,QAAQ,GAAE,EACd,GAAGf,KADW;AAEdO,QAAAA,OAAO,EAAEM;AAFK,OAAhB;AAKA,YAAMG,aAAa,GAAGX,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,OAAlB,CAAtB;AACAS,MAAAA,aAAa,CAACR,MAAd,CAAqBjB,WAAW,CAACQ,KAAjC,EAAuC,CAAvC,EAAyCN,WAAzC,EAlDmB,CAkDoC;;AACvD,YAAMwB,SAAS,GAAG,EAChB,GAAGd,MADa;AAEhBI,QAAAA,OAAO,EAACS;AAFQ,OAAlB;AAKA,YAAMN,QAAQ,GAAG,EACf,GAAG,KAAKzB,KADO;AAEfgB,QAAAA,OAAO,EAAC,EACN,GAAG,KAAKhB,KAAL,CAAWgB,OADR;AAEN,WAACc,QAAQ,CAACJ,EAAV,GAAcI,QAFR;AAGN,WAACE,SAAS,CAACN,EAAX,GAAgBM;AAHV;AAFO,OAAjB;AAUA,WAAKL,QAAL,CAAcF,QAAd;AACD,KArF8B;AAAA;;AAuF/BlC,EAAAA,MAAM,GAAE;AACN,wBACE,QAAC,eAAD;AACE,MAAA,WAAW,EAAE,KAAKU,WADpB;AAEE,MAAA,YAAY,EAAE,KAAKC,YAFrB;AAGE,MAAA,SAAS,EAAE,KAAKE,SAHlB;AAAA,6BAKE,QAAC,SAAD;AAAA,kBACG,KAAKJ,KAAL,CAAWiC,WAAX,CAAuBC,GAAvB,CAA4BC,QAAD,IAAY;AACtC,gBAAMC,MAAM,GAAG,KAAKpC,KAAL,CAAWgB,OAAX,CAAmBmB,QAAnB,CAAf;AACA,gBAAME,KAAK,GAAGD,MAAM,CAACd,OAAP,CAAeY,GAAf,CAAmBL,MAAM,IAAI,KAAK7B,KAAL,CAAWqC,KAAX,CAAiBR,MAAjB,CAA7B,CAAd;AAEA,8BAAO,QAAC,MAAD;AAAwB,YAAA,MAAM,EAAEO,MAAhC;AAAwC,YAAA,KAAK,EAAEC;AAA/C,aAAaD,MAAM,CAACV,EAApB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SALA;AADH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA3G8B;;AA+GjCpC,QAAQ,CAACC,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEkB,QAAQ,CAAC6B,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  state = initialData;\n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n  onDragEnd = result =>{\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n  \n    \n\n    if(!destination){\n      return;\n    }\n\n    if(destination.draggableId === source.draggableId && destination.index === source.index){\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if(start === finish){\n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    const startTaskIds = Array.from(start.taskId);\n    startTaskIds.splice(source.index, 1);\n    const newStart ={\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index,0,draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            const column = this.state.columns[columnId];\n            const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n\n            return <Column key={column.id} column={column} tasks={tasks}/>\n          })}\n        </Container>\n        \n      </DragDropContext>\n      \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"]},"metadata":{},"sourceType":"module"}