{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miller\\\\spartan-planner\\\\CS157C-team8\\\\spartan_planner\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport InsertModal from './InsertModal';\nimport DeleteModal from './DeleteModal';\nimport UpdateModal from './UpdateModal';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDragStart = () => {\n      /*\r\n      document.body.style.color = 'Orange'\r\n      document.body.style.transition = 'background-color 0.3s ease'\r\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\r\n      const {destination} = update;\r\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\r\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\r\n      */\n    };\n\n    this.onDragEnd = result => {\n      console.log(\"from onDragEnd\", this.state);\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      console.log(\"result\", result);\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      console.log(\"destination\", destination);\n      console.log(\"source\", source);\n      console.log(\"draggableId\", draggableId);\n      console.log(\"\\n\\n\");\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      console.log(\"start\", start);\n      console.log(\"finish\", finish);\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      console.log(\"hit\");\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      const taskValues = Object.values(this.state.tasks);\n      const columnValues = Object.values(this.state.columns);\n      let course = null;\n      taskValues.map((item, index) => {\n        if (item.id === draggableId) {\n          console.log(index);\n          course = item;\n          console.log(course.prerequisite);\n        }\n      });\n      let currentColumn = null;\n      let currentColumnIndex = null;\n      columnValues.map((element, index) => {\n        if (element.id === finish.id) {\n          currentColumn = element;\n          currentColumnIndex = index;\n        }\n      });\n      console.log(\"currentColumn\", currentColumn);\n      console.log(\"currentColumnIndex\", currentColumnIndex);\n      const takenClasses = null;\n\n      for (i = 4; i < currentColumnIndex; i++) {\n        columnValues[i].taskIds.forEach(task => takenClasses.push(task));\n      }\n\n      console.log(\"takenClasses\", takenClasses);\n      console.log(\"After onDragEnd\", newState);\n      console.log(\"After OnDragEnd source index\", source.index);\n      console.log(\"After OnDragEnd destination index\", destination.index);\n      this.setState(newState);\n    };\n\n    this.state = initialData; //console.log(initialData)\n  }\n\n  componentDidMount() {\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState = { ...this.state\n    };\n    let requirementsCourses = null;\n    let requiredCourseNames = [];\n    let selectiveCourses = null;\n    let selectiveCourseNames = [];\n    let deepCourses = null;\n    let deepCourseNames = [];\n    axios.get('http://localhost:5000/api/courses').then(response => {\n      // handle success\n      console.log(\"courses api: \", response.data); //console.log(\"task\",newState.tasks)\n\n      for (var i = 0; i < 3; i++) {\n        response.data[i].map(item => {\n          //console.log(item.course)\n          const course = item.course;\n          const obj = new Object();\n          obj.id = item.course;\n          obj.courseName = item.course;\n          obj.title = item.title;\n          obj.category = item.category;\n          obj.dept_name = item.dept_name;\n          obj.description = item.description;\n          obj.credit = item.credit;\n          obj.prerequisite = item.prerequisite; //obj.title = item.title\n\n          if (i === 0) {\n            requiredCourseNames.push(course);\n            requirementsCourses = { ...requirementsCourses,\n              [course]: obj\n            };\n          } else if (i === 1) {\n            deepCourseNames.push(course);\n            deepCourses = { ...deepCourses,\n              [course]: obj\n            };\n          } else {\n            selectiveCourseNames.push(course);\n            selectiveCourses = { ...selectiveCourses,\n              [course]: obj\n            };\n          }\n        });\n      } //console.log(\"requirmentObj: \", requirementsCourses)\n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\": \"column-1\",\n        \"title\": \"Requirements\",\n        \"taskIds\": requiredCourseNames\n      };\n      const columnObj2 = {\n        \"id\": \"column-2\",\n        \"title\": \"Deep Course\",\n        \"taskIds\": deepCourseNames\n      };\n      const columnObj3 = {\n        \"id\": \"column-3\",\n        \"title\": \"Selectives\",\n        \"taskIds\": selectiveCourseNames\n      };\n      newState.columns['column-1'] = columnObj1;\n      newState.columns['column-2'] = columnObj2;\n      newState.columns['column-3'] = columnObj3;\n      const allCourses = { ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses\n      };\n      console.log(allCourses);\n      console.log(requirementsCourses);\n      newState.tasks = allCourses;\n      this.setState(newState, () => {\n        console.log(\"update complete\", this.state);\n      });\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(InsertModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(UpdateModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 359,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/**\r\n\r\n1. call an api /courses\r\n\r\n\r\n1st[] = requirments\r\n2nd[] = eletives\r\n3rd[] = Deep course\r\n\r\n\r\n[  [{....}] , [{....}] , [{....}]  ] \r\n\r\n\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Miller/spartan-planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","InsertModal","DeleteModal","UpdateModal","styled","DragDropContext","axios","Container","div","App","Component","constructor","props","onDragStart","onDragUpdate","update","onDragEnd","result","console","log","state","destination","source","draggableId","document","body","style","color","backgroundColor","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","taskValues","Object","values","tasks","columnValues","course","map","item","prerequisite","currentColumn","currentColumnIndex","element","takenClasses","i","forEach","task","push","componentDidMount","requirementsCourses","requiredCourseNames","selectiveCourses","selectiveCourseNames","deepCourses","deepCourseNames","get","then","response","data","obj","courseName","title","category","dept_name","description","credit","columnObj1","columnObj2","columnObj3","allCourses","catch","error","columnOrder","columnId","theIdNum","match","parseInt","join","column","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport initialData from './initial-data'\r\nimport Column from './column'\r\nimport InsertModal from './InsertModal'\r\nimport DeleteModal from './DeleteModal'\r\nimport UpdateModal from './UpdateModal'\r\nimport styled from 'styled-components'\r\nimport {DragDropContext} from 'react-beautiful-dnd'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex\r\n`;\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = initialData;\r\n    //console.log(initialData)\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    //console.log(\"componentDidMount\")\r\n    //console.log(\"old state\",initialData)\r\n    const newState  = {\r\n      ...this.state,\r\n    }\r\n\r\n\r\n    let requirementsCourses = null\r\n    let requiredCourseNames = []  \r\n\r\n    let selectiveCourses = null\r\n    let selectiveCourseNames = []\r\n\r\n    let deepCourses = null\r\n    let deepCourseNames = []\r\n    \r\n    axios.get('http://localhost:5000/api/courses')\r\n    .then((response) => {\r\n      // handle success\r\n      console.log(\"courses api: \", response.data);\r\n      //console.log(\"task\",newState.tasks)\r\n      \r\n      for(var i=0; i < 3; i++){\r\n        response.data[i].map((item)=>{\r\n        //console.log(item.course)\r\n        const course = item.course\r\n        \r\n        const obj = new Object()\r\n        obj.id = item.course\r\n        obj.courseName = item.course\r\n        obj.title = item.title\r\n        obj.category = item.category\r\n        obj.dept_name = item.dept_name\r\n        obj.description = item.description\r\n        obj.credit = item.credit\r\n        obj.prerequisite = item.prerequisite\r\n        //obj.title = item.title\r\n        if(i === 0){\r\n          requiredCourseNames.push(course)\r\n          requirementsCourses ={\r\n          ...requirementsCourses,\r\n          [course]:obj\r\n          }\r\n        }else if(i === 1){\r\n          deepCourseNames.push(course)\r\n          deepCourses ={\r\n          ...deepCourses,\r\n          [course]:obj\r\n          }\r\n        }else{\r\n          selectiveCourseNames.push(course)\r\n          selectiveCourses ={\r\n          ...selectiveCourses,\r\n          [course]:obj\r\n          }\r\n        }\r\n     \r\n        })\r\n      }\r\n\r\n      //console.log(\"requirmentObj: \", requirementsCourses)\r\n      \r\n      //newState.tasks = Object.assign({},requirementsCourses)\r\n\r\n\r\n      const columnObj1 = {\r\n        \"id\":\"column-1\",\r\n        \"title\":\"Requirements\",\r\n        \"taskIds\" : requiredCourseNames\r\n      }\r\n\r\n      const columnObj2 = {\r\n        \"id\":\"column-2\",\r\n        \"title\":\"Deep Course\",\r\n        \"taskIds\" : deepCourseNames\r\n      }\r\n\r\n      const columnObj3 = {\r\n        \"id\":\"column-3\",\r\n        \"title\":\"Selectives\",\r\n        \"taskIds\" : selectiveCourseNames\r\n      }\r\n      newState.columns['column-1'] = columnObj1\r\n      newState.columns['column-2'] = columnObj2\r\n      newState.columns['column-3'] = columnObj3\r\n\r\n      const allCourses ={\r\n        ...requirementsCourses,\r\n        ...selectiveCourses,\r\n        ...deepCourses\r\n      }\r\n\r\n      console.log(allCourses)\r\n      console.log(requirementsCourses)\r\n      newState.tasks = allCourses\r\n\r\n      this.setState(newState,()=>{\r\n        console.log(\"update complete\", this.state)\r\n      })\r\n      \r\n    })\r\n    .catch(function (error) {\r\n      // handle error\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n      // always executed\r\n    });\r\n\r\n    \r\n\r\n    \r\n        \r\n  }\r\n\r\n\r\n  \r\n  \r\n\r\n  onDragStart = () =>{\r\n    /*\r\n    document.body.style.color = 'Orange'\r\n    document.body.style.transition = 'background-color 0.3s ease'\r\n    */\r\n  }\r\n\r\n  onDragUpdate = update =>{\r\n    /*\r\n    const {destination} = update;\r\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\r\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\r\n    */\r\n  }\r\n\r\n\r\n\r\n  onDragEnd = result =>{\r\n\r\n    console.log(\"from onDragEnd\", this.state)\r\n\r\n\r\n    const {destination, source, draggableId} = result;\r\n    console.log(\"result\", result)\r\n    document.body.style.color = 'inherit'\r\n    document.body.style.backgroundColor = 'inherit'\r\n    console.log(\"destination\",destination);\r\n    console.log(\"source\",source)\r\n    console.log(\"draggableId\",draggableId)\r\n    console.log(\"\\n\\n\")\r\n  \r\n    \r\n\r\n    if(!destination){\r\n      \r\n      return;\r\n      \r\n    }\r\n\r\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\r\n\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    console.log(\"start\",start)\r\n    console.log(\"finish\", finish)\r\n    \r\n    if(start === finish){\r\n   \r\n    const newTaskIds = Array.from(start.taskIds);\r\n    newTaskIds.splice(source.index,1);\r\n    newTaskIds.splice(destination.index,0,draggableId);\r\n\r\n    const newColumn={\r\n      ...start,\r\n      taskIds:newTaskIds,\r\n    };\r\n\r\n    const newState={\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newColumn.id]: newColumn,\r\n      }\r\n    }\r\n\r\n\r\n\r\n    this.setState(newState)\r\n\r\n\r\n    return;\r\n   }\r\n\r\n\r\n    // Moving from one list to another\r\n    console.log(\"hit\")\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    }\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds:finishTaskIds\r\n    }\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newStart.id]:newStart,\r\n        [newFinish.id]: newFinish,\r\n        \r\n      }\r\n    }\r\n\r\n    const taskValues = Object.values(this.state.tasks)\r\n    const columnValues = Object.values(this.state.columns)\r\n\r\n    let course = null\r\n    taskValues.map( (item, index) =>{\r\n      if(item.id === draggableId){\r\n        console.log(index)\r\n        course = item\r\n        console.log(course.prerequisite)\r\n      }\r\n    })\r\n\r\n    let currentColumn = null\r\n    let currentColumnIndex = null\r\n    columnValues.map( (element, index) => {\r\n      if(element.id === finish.id){\r\n        currentColumn = element\r\n        currentColumnIndex = index\r\n      }\r\n    })\r\n\r\n    console.log(\"currentColumn\", currentColumn)\r\n    console.log(\"currentColumnIndex\", currentColumnIndex)\r\n\r\n    const takenClasses = null\r\n    for(i = 4; i < currentColumnIndex; i++){\r\n      columnValues[i].taskIds.forEach( task => takenClasses.push(task))\r\n    }\r\n    console.log(\"takenClasses\", takenClasses)\r\n\r\n    console.log(\"After onDragEnd\", newState)\r\n    console.log(\"After OnDragEnd source index\", source.index)\r\n    console.log(\"After OnDragEnd destination index\", destination.index)\r\n\r\n\r\n    this.setState(newState)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n      <DragDropContext \r\n        onDragStart={this.onDragStart}\r\n        onDragUpdate={this.onDragUpdate}\r\n        onDragEnd={this.onDragEnd}\r\n      >\r\n        <Container>\r\n          {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum <= 4){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n        </Container>\r\n\r\n\r\n        <Container>\r\n        {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum > 4){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n\r\n        </Container>\r\n\r\n        <Container>\r\n        <InsertModal></InsertModal>\r\n        <DeleteModal></DeleteModal>\r\n        <UpdateModal></UpdateModal>\r\n       \r\n        </Container>\r\n      \r\n      </DragDropContext>\r\n\r\n     \r\n      </div>\r\n      \r\n\r\n    \r\n    )\r\n\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n1. call an api /courses\r\n\r\n\r\n1st[] = requirments\r\n2nd[] = eletives\r\n3rd[] = Deep course\r\n\r\n\r\n[  [{....}] , [{....}] , [{....}]  ] \r\n\r\n\r\n */"]},"metadata":{},"sourceType":"module"}