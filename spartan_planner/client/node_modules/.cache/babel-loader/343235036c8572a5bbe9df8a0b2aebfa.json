{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nfunction App() {\n  _s();\n\n  const [columnOrder, setColumnOrder] = useState(initialData.columnOrder);\n  const [columns, setColumns] = useState(initialData.columns);\n  const [tasks, setTasks] = useState(initialData.tasks);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setColumnOrder(initialData.columnOrder);\n    setColumns(initialData.columns);\n    setTasks(initialData.tasks);\n  }, [tasks]);\n\n  const onDragStart = () => {\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  };\n\n  const onDragUpdate = update => {\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  };\n\n  const insertOnClick = () => {\n    alert(\"click\");\n  };\n\n  const updateOnClick = () => {\n    alert(\"update\");\n  };\n\n  const deleteOnClick = () => {\n    alert(\"delete\");\n  };\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n    console.log(\"destination\", destination);\n    console.log(\"source\", source);\n    console.log(\"draggableId\", draggableId);\n    console.log(\"\\n\\n\");\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n    console.log(\"start\", start);\n    console.log(\"finish\", finish);\n\n    if (start === finish) {\n      const newTaskIds = Array.from(start.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n      const newColumn = { ...start,\n        taskIds: newTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      this.setState(newState);\n      return;\n    } // Moving from one list to another\n\n\n    console.log(\"hit\");\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = { ...start,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n    const newFinish = { ...finish,\n      taskIds: finishTaskIds\n    };\n    const newState = { ...this.state,\n      columns: { ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n    this.setState(newState);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragStart: onDragStart,\n      onDragUpdate: onDragUpdate,\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Container, {\n        children: columnOrder.map(columnId => {\n          //console.log(\"columnId\",columnId)\n          let theIdNum = columnId.match(/\\d/g);\n          theIdNum = parseInt(theIdNum.join(\"\"));\n          console.log(\"theIdNum\", theIdNum);\n          const column = columns[columnId]; //console.log(\"column\",column)\n\n          if (theIdNum < 4) {\n            const tasks = column.taskIds.map(taskId => tasks[taskId]);\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 22\n            }, this);\n          } else {\n            return;\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: columnOrder.map(columnId => {\n          //console.log(\"columnId\",columnId)\n          let theIdNum = columnId.match(/\\d/g);\n          theIdNum = parseInt(theIdNum.join(\"\"));\n          console.log(\"theIdNum\", theIdNum);\n          const column = columns[columnId]; //console.log(\"column\",column)\n\n          if (theIdNum > 3 && theIdNum <= 7) {\n            const tasks = column.taskIds.map(taskId => tasks[taskId]);\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 22\n            }, this);\n          } else {\n            return;\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: columnOrder.map(columnId => {\n          //console.log(\"columnId\",columnId)\n          let theIdNum = columnId.match(/\\d/g);\n          theIdNum = parseInt(theIdNum.join(\"\"));\n          console.log(\"theIdNum\", theIdNum);\n          const column = columns[columnId]; //console.log(\"column\",column)\n\n          if (theIdNum >= 8) {\n            const tasks = column.taskIds.map(taskId => tasks[taskId]);\n            return /*#__PURE__*/_jsxDEV(Column, {\n              column: column,\n              tasks: tasks\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 22\n            }, this);\n          } else {\n            return;\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Engineer only\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: insertOnClick,\n          children: \"Insert new course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: updateOnClick,\n          children: \"Update a course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteOnClick,\n          children: \"Delete a course\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"WeYk4LAY/VJZzY+9q4C14953ViM=\");\n\n_c2 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 231,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","useEffect","useState","ReactDOM","render","initialData","Column","styled","DragDropContext","Container","div","App","columnOrder","setColumnOrder","columns","setColumns","tasks","setTasks","loading","setLoading","onDragStart","onDragUpdate","update","insertOnClick","alert","updateOnClick","deleteOnClick","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","console","log","droppableId","index","start","state","finish","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","startTaskIds","newStart","finishTaskIds","newFinish","map","columnId","theIdNum","match","parseInt","join","column","taskId","getElementById"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nfunction App() {\n  const [columnOrder,setColumnOrder] = useState(initialData.columnOrder);\n  const [columns, setColumns] = useState(initialData.columns)\n  const [tasks,setTasks] = useState(initialData.tasks)\n  const [loading,setLoading] = useState(true)\n\n  useEffect(() => {\n    setColumnOrder(initialData.columnOrder);\n    setColumns(initialData.columns);\n    setTasks(initialData.tasks);\n  \n  }, [tasks]);\n\n\n\n  const onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  const onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n  const insertOnClick = () =>{\n    alert(\"click\")\n  }\n\n  const updateOnClick = () =>{\n    alert(\"update\")\n  }\n\n\n  const deleteOnClick = () =>{\n    alert(\"delete\")\n  }\n\n\n  const onDragEnd = result =>{\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    if(!destination){\n      \n      return;\n      \n    }\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n    return (\n      <div>\n      {loading?(<h1>Loading</h1>):(\n        <DragDropContext \n        onDragStart={onDragStart}\n        onDragUpdate={onDragUpdate}\n        onDragEnd={onDragEnd}\n      >\n        <Container>\n          {columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            console.log(\"theIdNum\",theIdNum);\n            const column = columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum < 4){\n              const tasks = column.taskIds.map(taskId => tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            console.log(\"theIdNum\",theIdNum);\n            const column = columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 3 && theIdNum <= 7 ){\n              const tasks = column.taskIds.map(taskId => tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n\n        <Container>\n        {columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            console.log(\"theIdNum\",theIdNum);\n            const column = columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum >= 8){\n              const tasks = column.taskIds.map(taskId => tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <div>\n        <h2>Engineer only</h2>\n        </div>\n\n        <Container>\n        <button onClick={insertOnClick}>Insert new course</button>\n        <button onClick={updateOnClick}>Update a course</button>\n        <button onClick={deleteOnClick}>Delete a course</button>\n        </Container>\n\n\n        \n      </DragDropContext>\n      )}\n     \n      </div>\n      \n      \n    )\n\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"]},"metadata":{},"sourceType":"module"}