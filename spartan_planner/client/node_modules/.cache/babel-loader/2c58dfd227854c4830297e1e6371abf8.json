{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miller\\\\spartan-planner\\\\CS157C-team8\\\\spartan_planner\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport SemesterColumn from './semesterColumn';\nimport InsertModal from './InsertModal';\nimport DeleteModal from './DeleteModal';\nimport UpdateModal from './UpdateModal';\nimport InfoModal from './InfoModal';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport Title from './Title';\nimport Button from '@material-ui/core/Button';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSelectedCourse = course => {\n      const newState = { ...this.state,\n        selectedCourse: course,\n        showCourseModal: true\n      };\n      this.setState(newState, () => {\n        console.log(\"from setSelectedCourse func\", this.state);\n      });\n    };\n\n    this.setNewState = newState => {\n      this.setState(newState, () => {\n        console.log(\"from index\", this.state);\n      });\n    };\n\n    this.toggleInfoModal = () => {\n      const newState = { ...this.state,\n        showCourseModal: !this.state.showCourseModal\n      };\n    };\n\n    this.onDragStart = () => {\n      /*\r\n      document.body.style.color = 'Orange'\r\n      document.body.style.transition = 'background-color 0.3s ease'\r\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\r\n      const {destination} = update;\r\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\r\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\r\n      */\n    };\n\n    this.onDragEnd = result => {\n      console.log(\"from ondrag end\", this.state);\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      console.log(\"result\", result);\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      console.log(\"destination\", destination);\n      console.log(\"source\", source);\n      console.log(\"draggableId\", draggableId);\n      console.log(\"\\n\\n\");\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      console.log(\"start\", start);\n      console.log(\"finish\", finish);\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      console.log(\"hit\");\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      let newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      const taskValues = Object.values(this.state.tasks);\n      const columnValues = Object.values(this.state.columns);\n      let course = null;\n      taskValues.map((item, index) => {\n        if (item.id === draggableId) {\n          console.log(index);\n          course = item;\n          console.log(course.prerequisite);\n        }\n      });\n      let currentColumn = null;\n      let currentColumnIndex = null;\n      columnValues.map((element, index) => {\n        if (element.id === finish.id) {\n          currentColumn = element;\n          currentColumnIndex = index;\n        }\n      });\n      console.log(\"currentColumn\", currentColumn);\n      console.log(\"currentColumnIndex\", currentColumnIndex);\n      const takenClasses = [];\n      var i;\n\n      for (i = 4; i < currentColumnIndex; i++) {\n        columnValues[i].taskIds.forEach(task => takenClasses.push(task));\n      }\n\n      console.log(\"takenClasses\", takenClasses);\n\n      for (i = 0; i < course.prerequisite.length; i++) {\n        if (takenClasses.includes(course.prerequisite[i])) {//console.log(\"satisfied\")\n        } else {\n          alert(` ${course.id} needs ${course.prerequisite[i]} as a prerequisite`);\n          return;\n        }\n      }\n\n      console.log(\"After onDragEnd\", newState);\n      console.log(\"After OnDragEnd source index\", source.index);\n      console.log(\"After OnDragEnd destination index\", destination.index);\n      const newStateColumnValues = Object.values(newState.columns);\n      console.log(\"new state column\", newStateColumnValues[currentColumnIndex]);\n      var newUnits = 0;\n      console.log(\"column task ids length\", newStateColumnValues[currentColumnIndex].taskIds.length);\n      var taskID = null;\n      var j;\n\n      for (i = 4; i <= 8; i++) {\n        for (j = 0; j < newStateColumnValues[i].taskIds.length; j++) {\n          taskID = newStateColumnValues[currentColumnIndex].taskIds[i];\n          taskValues.map((item, index) => {\n            if (item.id === taskID) {\n              newUnits += item.credit;\n            }\n          });\n        }\n      }\n\n      console.log(\"new units\", newUnits); //newStateColumnValues[currentColumnIndex].taskIds.forEach( task => takenClasses.push(task))\n      //newStateColumnValues[currentColumnIndex].units = units + course.units\n\n      console.log(\"new state\", newState);\n      newStateColumnValues[currentColumnIndex].units = newUnits;\n      console.log(\"check updated units\", newStateColumnValues[currentColumnIndex]); //newState.columns = newStateColumnValues\n      // const newState = {\n      //   ...this.state,\n      //   columns:{\n      //     ...this.state.columns,\n      //     [newStart.id]:newStart,\n      //     [newFinish.id]: newFinish,\n      //   }\n      // newState = {\n      //   ...newState,\n      //   columns:{\n      //     ...newStateColumnValues\n      //   }\n      // }\n\n      console.log(\"newnewState\", newState);\n      this.setState(newState);\n    };\n\n    this.state = initialData; //console.log(initialData)\n  }\n\n  componentDidMount() {\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState = { ...this.state,\n      showCourseModal: false,\n      selectedCourse: null\n    };\n    let requirementsCourses = null;\n    let requiredCourseNames = [];\n    let selectiveCourses = null;\n    let selectiveCourseNames = [];\n    let deepCourses = null;\n    let deepCourseNames = [];\n    let GECourses = null;\n    let GECourseNames = [];\n    axios.get('http://localhost:5000/api/courses').then(response => {\n      // handle success\n      console.log(\"courses api: \", response.data); //console.log(\"task\",newState.tasks)\n\n      for (var i = 0; i < response.data.length; i++) {\n        response.data[i].map(item => {\n          //console.log(item.course)\n          const course = item.course;\n          const obj = new Object();\n          obj.id = item.course;\n          obj.courseName = item.course;\n          obj.title = item.title;\n          obj.category = item.category;\n          obj.dept_name = item.dept_name;\n          obj.description = item.description;\n          obj.credit = item.credit;\n          obj.prerequisite = item.prerequisite;\n          obj.url = item.url; //obj.title = item.title\n\n          if (i === 0) {\n            requiredCourseNames.push(course);\n            requirementsCourses = { ...requirementsCourses,\n              [course]: obj\n            };\n          } else if (i === 1) {\n            selectiveCourseNames.push(course);\n            selectiveCourses = { ...selectiveCourses,\n              [course]: obj\n            };\n          } else if (i === 2) {\n            deepCourseNames.push(course);\n            deepCourses = { ...deepCourses,\n              [course]: obj\n            };\n          } else {\n            GECourseNames.push(course);\n            GECourses = { ...GECourses,\n              [course]: obj\n            };\n          }\n        });\n      } //console.log(\"requirmentObj: \", requirementsCourses)\n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\": \"column-1\",\n        \"title\": \"Requirements\",\n        \"taskIds\": requiredCourseNames\n      };\n      const columnObj2 = {\n        \"id\": \"column-2\",\n        \"title\": \"Selectives\",\n        \"taskIds\": selectiveCourseNames\n      };\n      const columnObj3 = {\n        \"id\": \"column-3\",\n        \"title\": \"Deep Course\",\n        \"taskIds\": deepCourseNames\n      };\n      const columnObj4 = {\n        \"id\": \"column-4\",\n        \"title\": \"Upper Division G.E.\",\n        \"taskIds\": GECourseNames\n      };\n      newState.columns['column-1'] = columnObj1;\n      newState.columns['column-2'] = columnObj2;\n      newState.columns['column-3'] = columnObj3;\n      console.log(\"col 4\", columnObj4);\n      console.log(\"col 3\", columnObj3);\n      newState.columns['column-4'] = columnObj4;\n      const allCourses = { ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses,\n        ...GECourses\n      };\n      console.log(allCourses);\n      console.log(requirementsCourses);\n      newState.tasks = allCourses;\n      this.setState(newState, () => {\n        console.log(\"update complete\", this.state);\n      });\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-div\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(Title, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 35\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 7\n      }, this), this.state.showCourseModal ? /*#__PURE__*/_jsxDEV(InfoModal, {\n        selectedCourse: this.state.selectedCourse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 37\n      }, this) : null, /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          className: \"course-containers1\",\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 2) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                className: \"course-col\",\n                column: column,\n                tasks: tasks,\n                data: this.state,\n                setNewState: this.setNewState,\n                setSelectedCourse: this.setSelectedCourse\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: \"course-containers2\",\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 4 && theIdNum > 2) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                className: \"course-col\",\n                column: column,\n                tasks: tasks,\n                data: this.state,\n                setNewState: this.setNewState,\n                setSelectedCourse: this.setSelectedCourse\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: \"semester-containers1\",\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 4 && theIdNum <= 6) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(SemesterColumn, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: \"semester-containers2\",\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 6) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(SemesterColumn, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: \"btns-container\",\n          children: [/*#__PURE__*/_jsxDEV(InsertModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(UpdateModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 524,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 523,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/**\r\n\r\n1. call an api /courses\r\n\r\n\r\n1st[] = requirments\r\n2nd[] = eletives\r\n3rd[] = Deep course\r\n\r\n\r\n[  [{....}] , [{....}] , [{....}]  ] \r\n\r\n\r\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["C:/Users/Miller/spartan-planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","SemesterColumn","InsertModal","DeleteModal","UpdateModal","InfoModal","styled","DragDropContext","axios","Title","Button","Container","div","App","Component","constructor","props","setSelectedCourse","course","newState","state","selectedCourse","showCourseModal","setState","console","log","setNewState","toggleInfoModal","onDragStart","onDragUpdate","update","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","id","startTaskIds","newStart","finishTaskIds","newFinish","taskValues","Object","values","tasks","columnValues","map","item","prerequisite","currentColumn","currentColumnIndex","element","takenClasses","i","forEach","task","push","length","includes","alert","newStateColumnValues","newUnits","taskID","j","credit","units","componentDidMount","requirementsCourses","requiredCourseNames","selectiveCourses","selectiveCourseNames","deepCourses","deepCourseNames","GECourses","GECourseNames","get","then","response","data","obj","courseName","title","category","dept_name","description","url","columnObj1","columnObj2","columnObj3","columnObj4","allCourses","catch","error","columnOrder","columnId","theIdNum","match","parseInt","join","column","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport initialData from './initial-data'\r\nimport Column from './column'\r\nimport SemesterColumn from './semesterColumn'\r\nimport InsertModal from './InsertModal'\r\nimport DeleteModal from './DeleteModal'\r\nimport UpdateModal from './UpdateModal'\r\nimport InfoModal from './InfoModal'\r\nimport styled from 'styled-components'\r\nimport {DragDropContext} from 'react-beautiful-dnd'\r\nimport axios from 'axios'\r\nimport Title from './Title'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './index.css'\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex\r\n`;\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = initialData;\r\n    //console.log(initialData)\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    //console.log(\"componentDidMount\")\r\n    //console.log(\"old state\",initialData)\r\n    const newState  = {\r\n      ...this.state,\r\n      showCourseModal: false,\r\n      selectedCourse: null,\r\n    }\r\n\r\n\r\n    let requirementsCourses = null\r\n    let requiredCourseNames = []  \r\n\r\n    let selectiveCourses = null\r\n    let selectiveCourseNames = []\r\n\r\n    let deepCourses = null\r\n    let deepCourseNames = []\r\n\r\n    let GECourses = null\r\n    let GECourseNames = []\r\n\r\n    \r\n    axios.get('http://localhost:5000/api/courses')\r\n    .then((response) => {\r\n      // handle success\r\n      console.log(\"courses api: \", response.data);\r\n      //console.log(\"task\",newState.tasks)\r\n      \r\n      for(var i=0; i < response.data.length; i++){\r\n        response.data[i].map((item)=>{\r\n        //console.log(item.course)\r\n        const course = item.course\r\n        \r\n        const obj = new Object()\r\n        obj.id = item.course\r\n        obj.courseName = item.course\r\n        obj.title = item.title\r\n        obj.category = item.category\r\n        obj.dept_name = item.dept_name\r\n        obj.description = item.description\r\n        obj.credit = item.credit\r\n        obj.prerequisite = item.prerequisite\r\n        obj.url = item.url\r\n        //obj.title = item.title\r\n        if(i === 0){\r\n          requiredCourseNames.push(course)\r\n          requirementsCourses ={\r\n          ...requirementsCourses,\r\n          [course]:obj\r\n          }\r\n        }else if(i === 1){\r\n          selectiveCourseNames.push(course)\r\n          selectiveCourses ={\r\n          ...selectiveCourses,\r\n          [course]:obj\r\n          }\r\n        }else if(i === 2){\r\n          deepCourseNames.push(course)\r\n          deepCourses ={\r\n          ...deepCourses,\r\n          [course]:obj\r\n          }\r\n        }else{\r\n          GECourseNames.push(course)\r\n          GECourses ={\r\n          ...GECourses,\r\n          [course]:obj\r\n          }\r\n        }\r\n     \r\n        })\r\n      }\r\n\r\n      //console.log(\"requirmentObj: \", requirementsCourses)\r\n      \r\n      //newState.tasks = Object.assign({},requirementsCourses)\r\n\r\n\r\n      const columnObj1 = {\r\n        \"id\":\"column-1\",\r\n        \"title\":\"Requirements\",\r\n        \"taskIds\" : requiredCourseNames\r\n      }\r\n\r\n      const columnObj2 = {\r\n        \"id\":\"column-2\",\r\n        \"title\":\"Selectives\",\r\n        \"taskIds\" : selectiveCourseNames\r\n      }\r\n\r\n      const columnObj3 = {\r\n        \"id\":\"column-3\",\r\n        \"title\":\"Deep Course\",\r\n        \"taskIds\" : deepCourseNames\r\n      }\r\n\r\n      const columnObj4 = {\r\n        \"id\":\"column-4\",\r\n        \"title\":\"Upper Division G.E.\",\r\n        \"taskIds\" : GECourseNames\r\n      }\r\n\r\n      \r\n\r\n\r\n      newState.columns['column-1'] = columnObj1\r\n      newState.columns['column-2'] = columnObj2\r\n      newState.columns['column-3'] = columnObj3\r\n\r\n      console.log(\"col 4\", columnObj4)\r\n      console.log(\"col 3\", columnObj3)\r\n      newState.columns['column-4'] = columnObj4\r\n\r\n      const allCourses ={\r\n        ...requirementsCourses,\r\n        ...selectiveCourses,\r\n        ...deepCourses,\r\n        ...GECourses\r\n      }\r\n\r\n      console.log(allCourses)\r\n      console.log(requirementsCourses)\r\n      newState.tasks = allCourses\r\n\r\n      this.setState(newState,()=>{\r\n        console.log(\"update complete\", this.state)\r\n      })\r\n      \r\n    })\r\n    .catch(function (error) {\r\n      // handle error\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n      // always executed\r\n    });\r\n\r\n    \r\n\r\n    \r\n        \r\n  }\r\n\r\n\r\n  setSelectedCourse = (course) =>{\r\n      const newState = {\r\n        ...this.state,\r\n        selectedCourse: course,\r\n        showCourseModal: true,\r\n      }\r\n\r\n      this.setState(newState, ()=>{\r\n        console.log(\"from setSelectedCourse func\", this.state)\r\n      })\r\n  }\r\n  \r\n  setNewState = (newState) =>{\r\n      this.setState(newState, ()=>{\r\n        console.log(\"from index\", this.state)\r\n      })\r\n  }\r\n\r\n  toggleInfoModal = () =>{\r\n    const newState = {\r\n      ...this.state,\r\n      showCourseModal: !this.state.showCourseModal\r\n    }\r\n  }\r\n  \r\n\r\n  onDragStart = () =>{\r\n    /*\r\n    document.body.style.color = 'Orange'\r\n    document.body.style.transition = 'background-color 0.3s ease'\r\n    */\r\n  }\r\n\r\n  onDragUpdate = update =>{\r\n    /*\r\n    const {destination} = update;\r\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\r\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\r\n    */\r\n  }\r\n\r\n\r\n\r\n  onDragEnd = result =>{\r\n\r\n    console.log(\"from ondrag end\", this.state)\r\n\r\n    const {destination, source, draggableId} = result;\r\n    console.log(\"result\", result)\r\n    document.body.style.color = 'inherit'\r\n    document.body.style.backgroundColor = 'inherit'\r\n    console.log(\"destination\",destination);\r\n    console.log(\"source\",source)\r\n    console.log(\"draggableId\",draggableId)\r\n    console.log(\"\\n\\n\")\r\n  \r\n    \r\n\r\n    if(!destination){\r\n      \r\n      return;\r\n      \r\n    }\r\n\r\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\r\n\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    console.log(\"start\",start)\r\n    console.log(\"finish\", finish)\r\n    \r\n    if(start === finish){\r\n   \r\n    const newTaskIds = Array.from(start.taskIds);\r\n    newTaskIds.splice(source.index,1);\r\n    newTaskIds.splice(destination.index,0,draggableId);\r\n\r\n    const newColumn={\r\n      ...start,\r\n      taskIds:newTaskIds,\r\n    };\r\n\r\n    const newState={\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newColumn.id]: newColumn,\r\n      }\r\n    }\r\n\r\n\r\n\r\n    this.setState(newState)\r\n\r\n\r\n    return;\r\n   }\r\n\r\n\r\n    // Moving from one list to another\r\n    console.log(\"hit\")\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    }\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds:finishTaskIds\r\n    }\r\n\r\n    let newState = {\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newStart.id]:newStart,\r\n        [newFinish.id]: newFinish,\r\n        \r\n      }\r\n    }\r\n\r\n    const taskValues = Object.values(this.state.tasks)\r\n    const columnValues = Object.values(this.state.columns)\r\n\r\n    let course = null\r\n    taskValues.map( (item, index) =>{\r\n      if(item.id === draggableId){\r\n        console.log(index)\r\n        course = item\r\n        console.log(course.prerequisite)\r\n      }\r\n    })\r\n\r\n    let currentColumn = null\r\n    let currentColumnIndex = null\r\n    columnValues.map( (element, index) => {\r\n      if(element.id === finish.id){\r\n        currentColumn = element\r\n        currentColumnIndex = index\r\n      }\r\n    })\r\n\r\n    console.log(\"currentColumn\", currentColumn)\r\n    console.log(\"currentColumnIndex\", currentColumnIndex)\r\n\r\n    const takenClasses = []\r\n    var i;\r\n    for(i = 4; i < currentColumnIndex; i++){\r\n      columnValues[i].taskIds.forEach( task => takenClasses.push(task))\r\n    }\r\n    console.log(\"takenClasses\", takenClasses)\r\n\r\n    for(i = 0; i < course.prerequisite.length; i++){\r\n      if(takenClasses.includes(course.prerequisite[i])){\r\n        //console.log(\"satisfied\")\r\n      }\r\n      else{\r\n        alert(` ${course.id} needs ${course.prerequisite[i]} as a prerequisite` )\r\n        return;\r\n      }\r\n    }\r\n\r\n    console.log(\"After onDragEnd\", newState)\r\n    console.log(\"After OnDragEnd source index\", source.index)\r\n    console.log(\"After OnDragEnd destination index\", destination.index)\r\n\r\n    const newStateColumnValues = Object.values(newState.columns)\r\n    console.log(\"new state column\",newStateColumnValues[currentColumnIndex])\r\n    var newUnits = 0\r\n    console.log(\"column task ids length\",newStateColumnValues[currentColumnIndex].taskIds.length)\r\n\r\n    var taskID = null\r\n    var j;\r\n    for(i = 4; i <=8 ; i++){\r\n      for(j = 0; j < newStateColumnValues[i].taskIds.length; j++){\r\n        taskID = newStateColumnValues[currentColumnIndex].taskIds[i]\r\n        taskValues.map( (item, index) =>{\r\n          if(item.id === taskID){\r\n            newUnits += item.credit\r\n          }\r\n      })\r\n     }\r\n    }\r\n\r\n    console.log(\"new units\", newUnits)\r\n\r\n    //newStateColumnValues[currentColumnIndex].taskIds.forEach( task => takenClasses.push(task))\r\n    //newStateColumnValues[currentColumnIndex].units = units + course.units\r\n\r\n\r\n    console.log(\"new state\", newState)\r\n    newStateColumnValues[currentColumnIndex].units = newUnits\r\n    console.log(\"check updated units\", newStateColumnValues[currentColumnIndex])\r\n    //newState.columns = newStateColumnValues\r\n\r\n    // const newState = {\r\n    //   ...this.state,\r\n    //   columns:{\r\n    //     ...this.state.columns,\r\n    //     [newStart.id]:newStart,\r\n    //     [newFinish.id]: newFinish,\r\n        \r\n    //   }\r\n\r\n    // newState = {\r\n    //   ...newState,\r\n    //   columns:{\r\n    //     ...newStateColumnValues\r\n    //   }\r\n    // }\r\n\r\n    console.log(\"newnewState\", newState)\r\n\r\n    this.setState(newState)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className = \"grid-container\" >\r\n      <div className=\"title-div\"> <Title/> </div>\r\n      {this.state.showCourseModal? (<InfoModal selectedCourse = {this.state.selectedCourse}></InfoModal>):(null)}\r\n      <DragDropContext \r\n        onDragStart={this.onDragStart}\r\n        onDragUpdate={this.onDragUpdate}\r\n        onDragEnd={this.onDragEnd}\r\n      >\r\n        <Container className= \"course-containers1\">\r\n\r\n          {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum <=2){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column className=\"course-col\" key={column.id} column={column} tasks={tasks} data={this.state} setNewState={this.setNewState} setSelectedCourse={this.setSelectedCourse} />\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n        </Container>\r\n\r\n        <Container className= \"course-containers2\">\r\n\r\n          {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum <= 4 && theIdNum >2){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column className=\"course-col\" key={column.id} column={column} tasks={tasks} data={this.state} setNewState={this.setNewState} setSelectedCourse={this.setSelectedCourse} />\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n        </Container>\r\n\r\n        <Container className=\"semester-containers1\">\r\n        {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum > 4 && theIdNum <=6){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <SemesterColumn  key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n\r\n        </Container>\r\n\r\n        <Container className=\"semester-containers2\">\r\n        {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum > 6){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <SemesterColumn  key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n\r\n        </Container>\r\n\r\n        <Container className=\"btns-container\">\r\n        <InsertModal></InsertModal>\r\n        <UpdateModal></UpdateModal>\r\n        <DeleteModal></DeleteModal>\r\n       \r\n        </Container>\r\n      \r\n\r\n\r\n\r\n       \r\n\r\n      \r\n      </DragDropContext>\r\n      \r\n      \r\n\r\n     \r\n      </div>\r\n      \r\n\r\n    \r\n    )\r\n\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n1. call an api /courses\r\n\r\n\r\n1st[] = requirments\r\n2nd[] = eletives\r\n3rd[] = Deep course\r\n\r\n\r\n[  [{....}] , [{....}] , [{....}]  ] \r\n\r\n\r\n */"]},"metadata":{},"sourceType":"module"}