{"ast":null,"code":"var _jsxFileName = \"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js\";\nimport React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data';\nimport Column from './column';\nimport InsertModal from './InsertModal';\nimport DeleteModal from './DeleteModal';\nimport UpdateModal from './UpdateModal';\nimport InfoModal from './InfoModal';\nimport styled from 'styled-components';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex\n`;\n_c = Container;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setSelectedCourse = course => {\n      const newState = { ...this.state,\n        selectedCourse: course,\n        showCourseModal: true\n      };\n      this.setState(newState, () => {\n        console.log(\"from setSelectedCourse func\", this.state);\n      });\n    };\n\n    this.setNewState = newState => {\n      this.setState(newState, () => {\n        console.log(\"from index\", this.state);\n      });\n    };\n\n    this.toggleInfoModal = () => {\n      const newState = { ...this.state,\n        showCourseModal: !this.state.showCourseModal\n      };\n    };\n\n    this.onDragStart = () => {\n      /*\n      document.body.style.color = 'Orange'\n      document.body.style.transition = 'background-color 0.3s ease'\n      */\n    };\n\n    this.onDragUpdate = update => {\n      /*\n      const {destination} = update;\n      const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n      document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n      */\n    };\n\n    this.onDragEnd = result => {\n      console.log(\"from ondrag end\", this.state);\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n      document.body.style.color = 'inherit';\n      document.body.style.backgroundColor = 'inherit';\n      console.log(\"destination\", destination);\n      console.log(\"source\", source);\n      console.log(\"draggableId\", draggableId);\n      console.log(\"\\n\\n\");\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      const start = this.state.columns[source.droppableId];\n      const finish = this.state.columns[destination.droppableId];\n      console.log(\"start\", start);\n      console.log(\"finish\", finish);\n\n      if (start === finish) {\n        const newTaskIds = Array.from(start.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n        const newColumn = { ...start,\n          taskIds: newTaskIds\n        };\n        const newState = { ...this.state,\n          columns: { ...this.state.columns,\n            [newColumn.id]: newColumn\n          }\n        };\n        this.setState(newState);\n        return;\n      } // Moving from one list to another\n\n\n      console.log(\"hit\");\n      const startTaskIds = Array.from(start.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStart = { ...start,\n        taskIds: startTaskIds\n      };\n      const finishTaskIds = Array.from(finish.taskIds);\n      finishTaskIds.splice(destination.index, 0, draggableId); //insert\n\n      const newFinish = { ...finish,\n        taskIds: finishTaskIds\n      };\n      const newState = { ...this.state,\n        columns: { ...this.state.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      };\n      this.setState(newState);\n    };\n\n    this.state = initialData; //console.log(initialData)\n  }\n\n  componentDidMount() {\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState = { ...this.state,\n      showCourseModal: false,\n      selectedCourse: null\n    };\n    let requirementsCourses = null;\n    let requiredCourseNames = [];\n    let selectiveCourses = null;\n    let selectiveCourseNames = [];\n    let deepCourses = null;\n    let deepCourseNames = [];\n    axios.get('http://localhost:5000/api/courses').then(response => {\n      // handle success\n      console.log(\"courses api: \", response.data); //console.log(\"task\",newState.tasks)\n\n      for (var i = 0; i < 3; i++) {\n        response.data[i].map(item => {\n          //console.log(item.course)\n          const course = item.course;\n          const obj = new Object();\n          obj.id = item.course;\n          obj.courseName = item.course;\n          obj.title = item.title;\n          obj.category = item.category;\n          obj.dept_name = item.dept_name;\n          obj.description = item.description;\n          obj.credit = item.credit;\n          obj.prerequisite = item.prerequisite; //obj.title = item.title\n\n          if (i === 0) {\n            requiredCourseNames.push(course);\n            requirementsCourses = { ...requirementsCourses,\n              [course]: obj\n            };\n          } else if (i === 1) {\n            deepCourseNames.push(course);\n            deepCourses = { ...deepCourses,\n              [course]: obj\n            };\n          } else {\n            selectiveCourseNames.push(course);\n            selectiveCourses = { ...selectiveCourses,\n              [course]: obj\n            };\n          }\n        });\n      } //console.log(\"requirmentObj: \", requirementsCourses)\n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\": \"column-1\",\n        \"title\": \"Requirements\",\n        \"taskIds\": requiredCourseNames\n      };\n      const columnObj2 = {\n        \"id\": \"column-2\",\n        \"title\": \"Deep Course\",\n        \"taskIds\": deepCourseNames\n      };\n      const columnObj3 = {\n        \"id\": \"column-3\",\n        \"title\": \"Selectives\",\n        \"taskIds\": selectiveCourseNames\n      };\n      newState.columns['column-1'] = columnObj1;\n      newState.columns['column-2'] = columnObj2;\n      newState.columns['column-3'] = columnObj3;\n      const allCourses = { ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses\n      };\n      console.log(allCourses);\n      console.log(requirementsCourses);\n      newState.tasks = allCourses;\n      this.setState(newState, () => {\n        console.log(\"update complete\", this.state);\n      });\n    }).catch(function (error) {\n      // handle error\n      console.log(error);\n    }).then(function () {// always executed\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.showCourseModal ? /*#__PURE__*/_jsxDEV(InfoModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 37\n      }, this) : null, /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate,\n        onDragEnd: this.onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum <= 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks,\n                data: this.state,\n                setNewState: this.setNewState,\n                setSelectedCourse: this.setSelectedCourse\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: this.state.columnOrder.map(columnId => {\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\")); //console.log(\"theIdNum\",theIdNum);\n\n            const column = this.state.columns[columnId]; //console.log(\"column\",column)\n\n            if (theIdNum > 4) {\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n              return /*#__PURE__*/_jsxDEV(Column, {\n                column: column,\n                tasks: tasks\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 22\n              }, this);\n            } else {\n              return;\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          children: [/*#__PURE__*/_jsxDEV(InsertModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DeleteModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(UpdateModal, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 345,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */\n\nvar _c;\n\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"sources":["/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js"],"names":["React","ReactDOM","render","initialData","Column","InsertModal","DeleteModal","UpdateModal","InfoModal","styled","DragDropContext","axios","Container","div","App","Component","constructor","props","setSelectedCourse","course","newState","state","selectedCourse","showCourseModal","setState","console","log","setNewState","toggleInfoModal","onDragStart","onDragUpdate","update","onDragEnd","result","destination","source","draggableId","document","body","style","color","backgroundColor","droppableId","index","start","columns","finish","newTaskIds","Array","from","taskIds","splice","newColumn","id","startTaskIds","newStart","finishTaskIds","newFinish","componentDidMount","requirementsCourses","requiredCourseNames","selectiveCourses","selectiveCourseNames","deepCourses","deepCourseNames","get","then","response","data","i","map","item","obj","Object","courseName","title","category","dept_name","description","credit","prerequisite","push","columnObj1","columnObj2","columnObj3","allCourses","tasks","catch","error","columnOrder","columnId","theIdNum","match","parseInt","join","column","taskId","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport InsertModal from './InsertModal'\nimport DeleteModal from './DeleteModal'\nimport UpdateModal from './UpdateModal'\nimport InfoModal from './InfoModal'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\nimport axios from 'axios'\n\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = initialData;\n    //console.log(initialData)\n  }\n\n\n  componentDidMount(){\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState  = {\n      ...this.state,\n      showCourseModal: false,\n      selectedCourse: null,\n    }\n\n\n    let requirementsCourses = null\n    let requiredCourseNames = []  \n\n    let selectiveCourses = null\n    let selectiveCourseNames = []\n\n    let deepCourses = null\n    let deepCourseNames = []\n    \n    axios.get('http://localhost:5000/api/courses')\n    .then((response) => {\n      // handle success\n      console.log(\"courses api: \", response.data);\n      //console.log(\"task\",newState.tasks)\n      \n      for(var i=0; i < 3; i++){\n        response.data[i].map((item)=>{\n        //console.log(item.course)\n        const course = item.course\n        \n        const obj = new Object()\n        obj.id = item.course\n        obj.courseName = item.course\n        obj.title = item.title\n        obj.category = item.category\n        obj.dept_name = item.dept_name\n        obj.description = item.description\n        obj.credit = item.credit\n        obj.prerequisite = item.prerequisite\n        //obj.title = item.title\n        if(i === 0){\n          requiredCourseNames.push(course)\n          requirementsCourses ={\n          ...requirementsCourses,\n          [course]:obj\n          }\n        }else if(i === 1){\n          deepCourseNames.push(course)\n          deepCourses ={\n          ...deepCourses,\n          [course]:obj\n          }\n        }else{\n          selectiveCourseNames.push(course)\n          selectiveCourses ={\n          ...selectiveCourses,\n          [course]:obj\n          }\n        }\n     \n        })\n      }\n\n      //console.log(\"requirmentObj: \", requirementsCourses)\n      \n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\":\"column-1\",\n        \"title\":\"Requirements\",\n        \"taskIds\" : requiredCourseNames\n      }\n\n      const columnObj2 = {\n        \"id\":\"column-2\",\n        \"title\":\"Deep Course\",\n        \"taskIds\" : deepCourseNames\n      }\n\n      const columnObj3 = {\n        \"id\":\"column-3\",\n        \"title\":\"Selectives\",\n        \"taskIds\" : selectiveCourseNames\n      }\n      newState.columns['column-1'] = columnObj1\n      newState.columns['column-2'] = columnObj2\n      newState.columns['column-3'] = columnObj3\n\n      const allCourses ={\n        ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses\n      }\n\n      console.log(allCourses)\n      console.log(requirementsCourses)\n      newState.tasks = allCourses\n\n      this.setState(newState,()=>{\n        console.log(\"update complete\", this.state)\n      })\n      \n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n\n    \n\n    \n        \n  }\n\n\n  setSelectedCourse = (course) =>{\n      const newState = {\n        ...this.state,\n        selectedCourse: course,\n        showCourseModal: true,\n      }\n\n      this.setState(newState, ()=>{\n        console.log(\"from setSelectedCourse func\", this.state)\n      })\n  }\n  \n  setNewState = (newState) =>{\n      this.setState(newState, ()=>{\n        console.log(\"from index\", this.state)\n      })\n  }\n\n  toggleInfoModal = () =>{\n    const newState = {\n      ...this.state,\n      showCourseModal: !this.state.showCourseModal\n    }\n  }\n  \n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n\n\n  onDragEnd = result =>{\n\n    console.log(\"from ondrag end\", this.state)\n\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    \n\n    if(!destination){\n      \n      return;\n      \n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <div>\n      {this.state.showCourseModal? (<InfoModal></InfoModal>):(null)}\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum <= 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks} data={this.state} setNewState={this.setNewState} setSelectedCourse={this.setSelectedCourse} />\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <Container>\n        <InsertModal></InsertModal>\n        <DeleteModal></DeleteModal>\n        <UpdateModal></UpdateModal>\n       \n        </Container>\n      \n      </DragDropContext>\n\n     \n      </div>\n      \n\n    \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */"]},"metadata":{},"sourceType":"module"}