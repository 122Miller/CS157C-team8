
[{"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\index.js":"1","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\initial-data.js":"2","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\UpdateModal.jsx":"3","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\DeleteModal.jsx":"4","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\InsertModal.jsx":"5","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\column.jsx":"6","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\task.jsx":"7"},{"size":9518,"mtime":1620000690090,"results":"8","hashOfConfig":"9"},{"size":1653,"mtime":1619928575385,"results":"10","hashOfConfig":"9"},{"size":5751,"mtime":1619928575384,"results":"11","hashOfConfig":"9"},{"size":2333,"mtime":1619928575383,"results":"12","hashOfConfig":"9"},{"size":5328,"mtime":1619928575383,"results":"13","hashOfConfig":"9"},{"size":1491,"mtime":1619404765909,"results":"14","hashOfConfig":"9"},{"size":1220,"mtime":1619928575385,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"33diq1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\index.js",["32","33","34","35","36","37","38","39"],"import React from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport initialData from './initial-data'\r\nimport Column from './column'\r\nimport InsertModal from './InsertModal'\r\nimport DeleteModal from './DeleteModal'\r\nimport UpdateModal from './UpdateModal'\r\nimport styled from 'styled-components'\r\nimport {DragDropContext} from 'react-beautiful-dnd'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex\r\n`;\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = initialData;\r\n    //console.log(initialData)\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    //console.log(\"componentDidMount\")\r\n    //console.log(\"old state\",initialData)\r\n    const newState  = {\r\n      ...this.state,\r\n    }\r\n\r\n\r\n    let requirementsCourses = null\r\n    let requiredCourseNames = []  \r\n\r\n    let selectiveCourses = null\r\n    let selectiveCourseNames = []\r\n\r\n    let deepCourses = null\r\n    let deepCourseNames = []\r\n    \r\n    axios.get('http://localhost:5000/api/courses')\r\n    .then((response) => {\r\n      // handle success\r\n      console.log(\"courses api: \", response.data);\r\n      //console.log(\"task\",newState.tasks)\r\n      \r\n      for(var i=0; i < 3; i++){\r\n        response.data[i].map((item)=>{\r\n        //console.log(item.course)\r\n        const course = item.course\r\n        \r\n        const obj = new Object()\r\n        obj.id = item.course\r\n        obj.courseName = item.course\r\n        obj.title = item.title\r\n        obj.category = item.category\r\n        obj.dept_name = item.dept_name\r\n        obj.description = item.description\r\n        obj.credit = item.credit\r\n        obj.prerequisite = item.prerequisite\r\n        //obj.title = item.title\r\n        if(i === 0){\r\n          requiredCourseNames.push(course)\r\n          requirementsCourses ={\r\n          ...requirementsCourses,\r\n          [course]:obj\r\n          }\r\n        }else if(i === 1){\r\n          deepCourseNames.push(course)\r\n          deepCourses ={\r\n          ...deepCourses,\r\n          [course]:obj\r\n          }\r\n        }else{\r\n          selectiveCourseNames.push(course)\r\n          selectiveCourses ={\r\n          ...selectiveCourses,\r\n          [course]:obj\r\n          }\r\n        }\r\n     \r\n        })\r\n      }\r\n\r\n      //console.log(\"requirmentObj: \", requirementsCourses)\r\n      \r\n      //newState.tasks = Object.assign({},requirementsCourses)\r\n\r\n\r\n      const columnObj1 = {\r\n        \"id\":\"column-1\",\r\n        \"title\":\"Requirements\",\r\n        \"taskIds\" : requiredCourseNames\r\n      }\r\n\r\n      const columnObj2 = {\r\n        \"id\":\"column-2\",\r\n        \"title\":\"Deep Course\",\r\n        \"taskIds\" : deepCourseNames\r\n      }\r\n\r\n      const columnObj3 = {\r\n        \"id\":\"column-3\",\r\n        \"title\":\"Selectives\",\r\n        \"taskIds\" : selectiveCourseNames\r\n      }\r\n      newState.columns['column-1'] = columnObj1\r\n      newState.columns['column-2'] = columnObj2\r\n      newState.columns['column-3'] = columnObj3\r\n\r\n      const allCourses ={\r\n        ...requirementsCourses,\r\n        ...selectiveCourses,\r\n        ...deepCourses\r\n      }\r\n\r\n      console.log(allCourses)\r\n      console.log(requirementsCourses)\r\n      newState.tasks = allCourses\r\n\r\n      this.setState(newState,()=>{\r\n        console.log(\"update complete\", this.state)\r\n      })\r\n      \r\n    })\r\n    .catch(function (error) {\r\n      // handle error\r\n      console.log(error);\r\n    })\r\n    .then(function () {\r\n      // always executed\r\n    });\r\n\r\n    \r\n\r\n    \r\n        \r\n  }\r\n\r\n\r\n  \r\n  \r\n\r\n  onDragStart = () =>{\r\n    /*\r\n    document.body.style.color = 'Orange'\r\n    document.body.style.transition = 'background-color 0.3s ease'\r\n    */\r\n  }\r\n\r\n  onDragUpdate = update =>{\r\n    /*\r\n    const {destination} = update;\r\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\r\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\r\n    */\r\n  }\r\n\r\n\r\n\r\n  onDragEnd = result =>{\r\n\r\n    console.log(\"from onDragEnd\", this.state)\r\n\r\n\r\n    const {destination, source, draggableId} = result;\r\n    console.log(\"result\", result)\r\n    document.body.style.color = 'inherit'\r\n    document.body.style.backgroundColor = 'inherit'\r\n    console.log(\"destination\",destination);\r\n    console.log(\"source\",source)\r\n    console.log(\"draggableId\",draggableId)\r\n    console.log(\"\\n\\n\")\r\n  \r\n    \r\n\r\n    if(!destination){\r\n      \r\n      return;\r\n      \r\n    }\r\n\r\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\r\n\r\n      return;\r\n    }\r\n\r\n    const start = this.state.columns[source.droppableId];\r\n    const finish = this.state.columns[destination.droppableId];\r\n\r\n    console.log(\"start\",start)\r\n    console.log(\"finish\", finish)\r\n    \r\n    if(start === finish){\r\n   \r\n    const newTaskIds = Array.from(start.taskIds);\r\n    newTaskIds.splice(source.index,1);\r\n    newTaskIds.splice(destination.index,0,draggableId);\r\n\r\n    const newColumn={\r\n      ...start,\r\n      taskIds:newTaskIds,\r\n    };\r\n\r\n    const newState={\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newColumn.id]: newColumn,\r\n      }\r\n    }\r\n\r\n\r\n\r\n    this.setState(newState)\r\n\r\n\r\n    return;\r\n   }\r\n\r\n\r\n    // Moving from one list to another\r\n    console.log(\"hit\")\r\n    const startTaskIds = Array.from(start.taskIds);\r\n    startTaskIds.splice(source.index, 1);\r\n    const newStart = {\r\n      ...start,\r\n      taskIds: startTaskIds\r\n    }\r\n\r\n    const finishTaskIds = Array.from(finish.taskIds);\r\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\r\n    const newFinish = {\r\n      ...finish,\r\n      taskIds:finishTaskIds\r\n    }\r\n\r\n    const newState = {\r\n      ...this.state,\r\n      columns:{\r\n        ...this.state.columns,\r\n        [newStart.id]:newStart,\r\n        [newFinish.id]: newFinish,\r\n        \r\n      }\r\n    }\r\n\r\n    const taskValues = Object.values(this.state.tasks)\r\n    const columnValues = Object.values(this.state.columns)\r\n\r\n    let course = null\r\n    taskValues.map( (item, index) =>{\r\n      if(item.id === draggableId){\r\n        console.log(index)\r\n        course = item\r\n        console.log(course.prerequisite)\r\n      }\r\n    })\r\n\r\n    let currentColumn = null\r\n    let currentColumnIndex = null\r\n    columnValues.map( (element, index) => {\r\n      if(element.id === finish.id){\r\n        currentColumn = element\r\n        currentColumnIndex = index\r\n      }\r\n    })\r\n\r\n    console.log(\"currentColumn\", currentColumn)\r\n    console.log(\"currentColumnIndex\", currentColumnIndex)\r\n\r\n    const takenClasses = []\r\n    var i;\r\n    for(i = 4; i < currentColumnIndex; i++){\r\n      columnValues[i].taskIds.forEach( task => takenClasses.push(task))\r\n    }\r\n    console.log(\"takenClasses\", takenClasses)\r\n\r\n    for(i = 0; i < course.prerequisite.length; i++){\r\n      if(takenClasses.includes(course.prerequisite[i])){\r\n        console.log(\"satisfied\")\r\n      }\r\n      else{\r\n        alert(`prereq not satisfied ${course.prerequisite[i]}` )\r\n        return;\r\n      }\r\n    }\r\n\r\n\r\n    console.log(\"After onDragEnd\", newState)\r\n    console.log(\"After OnDragEnd source index\", source.index)\r\n    console.log(\"After OnDragEnd destination index\", destination.index)\r\n\r\n\r\n    this.setState(newState)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n      <DragDropContext \r\n        onDragStart={this.onDragStart}\r\n        onDragUpdate={this.onDragUpdate}\r\n        onDragEnd={this.onDragEnd}\r\n      >\r\n        <Container>\r\n          {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum <= 4){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n        </Container>\r\n\r\n\r\n        <Container>\r\n        {this.state.columnOrder.map((columnId)=>{\r\n            //console.log(\"columnId\",columnId)\r\n            let theIdNum = columnId.match(/\\d/g);\r\n            theIdNum = parseInt(theIdNum.join(\"\"));\r\n            \r\n            //console.log(\"theIdNum\",theIdNum);\r\n            const column = this.state.columns[columnId];\r\n            //console.log(\"column\",column)\r\n\r\n            if(theIdNum > 4){\r\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\r\n              return <Column key={column.id} column={column} tasks={tasks}/>\r\n            }else{\r\n              return;\r\n            }\r\n            \r\n          })}\r\n\r\n        </Container>\r\n\r\n        <Container>\r\n        <InsertModal></InsertModal>\r\n        <DeleteModal></DeleteModal>\r\n        <UpdateModal></UpdateModal>\r\n       \r\n        </Container>\r\n      \r\n      </DragDropContext>\r\n\r\n     \r\n      </div>\r\n      \r\n\r\n    \r\n    )\r\n\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n1. call an api /courses\r\n\r\n\r\n1st[] = requirments\r\n2nd[] = eletives\r\n3rd[] = Deep course\r\n\r\n\r\n[  [{....}] , [{....}] , [{....}]  ] \r\n\r\n\r\n */","C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\initial-data.js",[],["40","41"],"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\UpdateModal.jsx",[],"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\DeleteModal.jsx",[],"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\InsertModal.jsx",[],"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\column.jsx",[],"C:\\Users\\Miller\\spartan-planner\\CS157C-team8\\spartan_planner\\client\\src\\task.jsx",[],{"ruleId":"42","severity":1,"message":"43","line":2,"column":20,"nodeType":"44","messageId":"45","endLine":2,"endColumn":26},{"ruleId":"46","severity":1,"message":"47","line":50,"column":30,"nodeType":"48","messageId":"49","endLine":84,"endColumn":10},{"ruleId":"50","severity":1,"message":"51","line":50,"column":36,"nodeType":"48","messageId":"52","endLine":50,"endColumn":38},{"ruleId":"53","severity":1,"message":"54","line":54,"column":21,"nodeType":"55","messageId":"56","endLine":54,"endColumn":33},{"ruleId":"50","severity":1,"message":"51","line":254,"column":35,"nodeType":"48","messageId":"52","endLine":254,"endColumn":37},{"ruleId":"50","severity":1,"message":"51","line":264,"column":40,"nodeType":"48","messageId":"52","endLine":264,"endColumn":42},{"ruleId":"50","severity":1,"message":"51","line":322,"column":15,"nodeType":"57","messageId":"58","endLine":322,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":343,"column":15,"nodeType":"57","messageId":"58","endLine":343,"endColumn":22},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'requirementsCourses', 'requirementsCourses', 'i', 'deepCourses', 'deepCourses', 'selectiveCourses', 'selectiveCourses'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","ReturnStatement","expectedReturnValue","no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-global-assign","no-unsafe-negation"]

