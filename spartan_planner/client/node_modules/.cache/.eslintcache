[{"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js":"1","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/initial-data.js":"2","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/column.jsx":"3","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/task.jsx":"4","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/InsertModal.jsx":"5","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/DeleteModal.jsx":"6","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/UpdateModal.jsx":"7","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/InfoModal.jsx":"8"},{"size":10488,"mtime":1620007244387,"results":"9","hashOfConfig":"10"},{"size":1652,"mtime":1619993380011,"results":"11","hashOfConfig":"10"},{"size":1585,"mtime":1620006835204,"results":"12","hashOfConfig":"10"},{"size":1407,"mtime":1620008243579,"results":"13","hashOfConfig":"10"},{"size":5722,"mtime":1620006998814,"results":"14","hashOfConfig":"10"},{"size":2410,"mtime":1620007039740,"results":"15","hashOfConfig":"10"},{"size":5735,"mtime":1620007051172,"results":"16","hashOfConfig":"10"},{"size":2354,"mtime":1620006316850,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"127ocba",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/index.js",["38","39","40","41","42","43","44","45","46"],"import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport InsertModal from './InsertModal'\nimport DeleteModal from './DeleteModal'\nimport UpdateModal from './UpdateModal'\nimport InfoModal from './InfoModal'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\nimport axios from 'axios'\n\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = initialData;\n    //console.log(initialData)\n  }\n\n\n  componentDidMount(){\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState  = {\n      ...this.state,\n      showCourseModal: false,\n      selectedCourse: null,\n    }\n\n\n    let requirementsCourses = null\n    let requiredCourseNames = []  \n\n    let selectiveCourses = null\n    let selectiveCourseNames = []\n\n    let deepCourses = null\n    let deepCourseNames = []\n\n    let GECourses = null\n    let GECourseNames = []\n\n    \n    axios.get('http://localhost:5000/api/courses')\n    .then((response) => {\n      // handle success\n      console.log(\"courses api: \", response.data);\n      //console.log(\"task\",newState.tasks)\n      \n      for(var i=0; i < response.data.length; i++){\n        response.data[i].map((item)=>{\n        //console.log(item.course)\n        const course = item.course\n        \n        const obj = new Object()\n        obj.id = item.course\n        obj.courseName = item.course\n        obj.title = item.title\n        obj.category = item.category\n        obj.dept_name = item.dept_name\n        obj.description = item.description\n        obj.credit = item.credit\n        obj.prerequisite = item.prerequisite\n        obj.url = item.url\n        //obj.title = item.title\n        if(i === 0){\n          requiredCourseNames.push(course)\n          requirementsCourses ={\n          ...requirementsCourses,\n          [course]:obj\n          }\n        }else if(i === 1){\n          selectiveCourseNames.push(course)\n          selectiveCourses ={\n          ...selectiveCourses,\n          [course]:obj\n          }\n        }else if(i === 2){\n          deepCourseNames.push(course)\n          deepCourses ={\n          ...deepCourses,\n          [course]:obj\n          }\n        }else{\n          GECourseNames.push(course)\n          GECourses ={\n          ...GECourses,\n          [course]:obj\n          }\n        }\n     \n        })\n      }\n\n      //console.log(\"requirmentObj: \", requirementsCourses)\n      \n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\":\"column-1\",\n        \"title\":\"Requirements\",\n        \"taskIds\" : requiredCourseNames\n      }\n\n      const columnObj2 = {\n        \"id\":\"column-2\",\n        \"title\":\"Selectives\",\n        \"taskIds\" : selectiveCourseNames\n      }\n\n      const columnObj3 = {\n        \"id\":\"column-3\",\n        \"title\":\"Deep Course\",\n        \"taskIds\" : deepCourseNames\n      }\n\n      const columnObj4 = {\n        \"id\":\"column-4\",\n        \"title\":\"Upper Division G.E.\",\n        \"taskIds\" : GECourseNames\n      }\n\n      \n\n\n      newState.columns['column-1'] = columnObj1\n      newState.columns['column-2'] = columnObj2\n      newState.columns['column-3'] = columnObj3\n\n      console.log(\"col 4\", columnObj4)\n      console.log(\"col 3\", columnObj3)\n      newState.columns['column-4'] = columnObj4\n\n      const allCourses ={\n        ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses,\n        ...GECourses\n      }\n\n      console.log(allCourses)\n      console.log(requirementsCourses)\n      newState.tasks = allCourses\n\n      this.setState(newState,()=>{\n        console.log(\"update complete\", this.state)\n      })\n      \n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n\n    \n\n    \n        \n  }\n\n\n  setSelectedCourse = (course) =>{\n      const newState = {\n        ...this.state,\n        selectedCourse: course,\n        showCourseModal: true,\n      }\n\n      this.setState(newState, ()=>{\n        console.log(\"from setSelectedCourse func\", this.state)\n      })\n  }\n  \n  setNewState = (newState) =>{\n      this.setState(newState, ()=>{\n        console.log(\"from index\", this.state)\n      })\n  }\n\n  toggleInfoModal = () =>{\n    const newState = {\n      ...this.state,\n      showCourseModal: !this.state.showCourseModal\n    }\n  }\n  \n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n\n\n  onDragEnd = result =>{\n\n    console.log(\"from ondrag end\", this.state)\n\n    const {destination, source, draggableId} = result;\n    console.log(\"result\", result)\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    \n\n    if(!destination){\n      \n      return;\n      \n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n\n\n    this.setState(newState)\n\n\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    const taskValues = Object.values(this.state.tasks)\n    const columnValues = Object.values(this.state.columns)\n\n    let course = null\n    taskValues.map( (item, index) =>{\n      if(item.id === draggableId){\n        console.log(index)\n        course = item\n        console.log(course.prerequisite)\n      }\n    })\n\n    let currentColumn = null\n    let currentColumnIndex = null\n    columnValues.map( (element, index) => {\n      if(element.id === finish.id){\n        currentColumn = element\n        currentColumnIndex = index\n      }\n    })\n\n    console.log(\"currentColumn\", currentColumn)\n    console.log(\"currentColumnIndex\", currentColumnIndex)\n\n    const takenClasses = []\n    var i;\n    for(i = 4; i < currentColumnIndex; i++){\n      columnValues[i].taskIds.forEach( task => takenClasses.push(task))\n    }\n    console.log(\"takenClasses\", takenClasses)\n\n    for(i = 0; i < course.prerequisite.length; i++){\n      if(takenClasses.includes(course.prerequisite[i])){\n        console.log(\"satisfied\")\n      }\n      else{\n        alert(`prereq not satisfied ${course.prerequisite[i]}` )\n        return;\n      }\n    }\n\n\n    console.log(\"After onDragEnd\", newState)\n    console.log(\"After OnDragEnd source index\", source.index)\n    console.log(\"After OnDragEnd destination index\", destination.index)\n\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <div>\n      {this.state.showCourseModal? (<InfoModal selectedCourse = {this.state.selectedCourse}></InfoModal>):(null)}\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum <= 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks} data={this.state} setNewState={this.setNewState} setSelectedCourse={this.setSelectedCourse} />\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <Container>\n        <InsertModal></InsertModal>\n        <DeleteModal></DeleteModal>\n        <UpdateModal></UpdateModal>\n       \n        </Container>\n      \n      </DragDropContext>\n\n     \n      </div>\n      \n\n    \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/initial-data.js",[],"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/column.jsx",["47"],"import React from 'react'\nimport styled from 'styled-components'\nimport Task from './task'\nimport {Droppable} from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n    margin:8px;\n    border: 1px solid lightgray;\n    border-radius:2px;\n    width: 350px;\n    display: flex;\n    flex-direction: column\n`;\n\nconst Title = styled.h3`\n    padding:8px\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2 ease;\n    background-color: ${props=> (props.isDraggingOver? 'skyblue': 'white')};\n    overflow-y: scroll;\n    height:300px;\n`;\n\n\nexport default class Column extends React.Component{\n\n    constructor(props){\n        super(props)\n        //console.log(\"from Column\", props)\n    }\n\n    render(){\n        return(\n            <Container>\n           <Title>{this.props.column.title}</Title>\n           <Droppable \n                droppableId={this.props.column.id} \n                //type={\"Task\"}\n                isDropDisabled={false}\n            >\n                {(provided, snapshot)=>(\n                    <TaskList\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        isDraggingOver={snapshot.isDraggingOver}\n                    >\n                    {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index}  setSelectedCourse={this.props.setSelectedCourse}/>\n                    )}\n                    {provided.placeholder}\n                    </TaskList>\n                )}\n           </Droppable>\n       </Container>\n        )\n       \n    }\n}\n","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/task.jsx",["48"],"import React from 'react'\nimport styled from 'styled-components'\nimport {Draggable} from 'react-beautiful-dnd'\nimport InfoModal from './InfoModal'\n\n\nconst Container = styled.div`\n    border: 1px solid lightgray;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom:8px;\n    background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n    display : flex;\n\n`;\n\n\nconst Handle = styled.div`\n    width: 20px;\n    height: 20px;\n    background-color :orange;\n    border-radius: 4px;\n    margin-right: 8px;\n`\n\n\n\n\nexport default class Task extends React.Component{\n    constructor(props){\n        super(props)\n    \n       \n        //this.onClickHandler = this.onClickHandler.bind(this)\n    \n    }\n\n\n    \n    render(){\n        \n        return (\n        <Draggable \n            draggableId={this.props.task.id} \n            index={this.props.index}\n        >\n            {(provided, snapshot)=>(\n                \n            \n                <Container\n                {...provided.draggableProps}\n                \n                ref={provided.innerRef}\n                isDragging={snapshot.isDragging}\n                >\n                <Handle  {...provided.dragHandleProps}/>\n                <InfoModal task={this.props.task}></InfoModal>\n                \n                </Container>\n               \n                \n            )}\n            \n        </Draggable>\n        \n        )\n    }\n}","/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/InsertModal.jsx",[],"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/DeleteModal.jsx",[],"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/UpdateModal.jsx",[],"/Users/pakshingkan/Desktop/Spring2021/CS157C/CS156C_Project/CS157C-team8/spartan_planner/CS157C-team8/spartan_planner/client/src/InfoModal.jsx",["49","50"],"import axios from 'axios';\nimport React from 'react';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport './InsertModal.css'\n \nexport default  class InfoModal extends React.Component{ \n    constructor(props){\n        super(props)\n        //this.state =props\n        //console.log(\"from infoModal\", props)\n    }\n\n\n\n\n\n    render(){\n        return(\n            <Popup\n            trigger={<button className=\"button\"> {this.props.task.id} </button>}\n            modal\n            nested\n          >\n            {close => (\n              <div className=\"modal\">\n                <button className=\"close\" onClick={close}>\n                  &times;\n                </button>\n                <div className=\"header\"> Course Information </div>\n                <div className=\"content\">\n                    <form onSubmit={this.onDeleteClick}>\n                        <div>\n                            <label>Course: {this.props.task.id}</label>\n                            <br/>\n                            <br/>\n                            <label>Title: {this.props.task.title} </label>\n                            <br/>\n                            <br/>\n                            <label>Category: {this.props.task.category} </label>\n                            <br/>\n                            <br/>\n                            <label>Description: {this.props.task.description} </label>\n                            <br/>\n                            <br/>\n                            <label>Prerequisite: {this.props.task.prerequisite} </label>\n                            <br/>\n                            <br/>\n                            <label>Department: {this.props.task.dept_name} </label>\n                            <br/>\n                            <br/>\n                            <label>Credit: {this.props.task.credit} </label>\n                            <br/>\n                            <br/>\n                            <button><a href={this.props.task.url} target=\"_blank\" rel=\"noopener noreferrer\">Url for more details</a> </button>\n                            <br/>\n                \n                            <br/>\n                        </div>\n                        \n                    </form>\n                </div>        \n              </div>\n            )}\n          </Popup>\n        )\n    }\n  \n};",{"ruleId":"51","severity":1,"message":"52","line":2,"column":20,"nodeType":"53","messageId":"54","endLine":2,"endColumn":26},{"ruleId":"55","severity":1,"message":"56","line":57,"column":30,"nodeType":"57","messageId":"58","endLine":98,"endColumn":10},{"ruleId":"59","severity":1,"message":"60","line":57,"column":36,"nodeType":"57","messageId":"61","endLine":57,"endColumn":38},{"ruleId":"62","severity":1,"message":"63","line":61,"column":21,"nodeType":"64","messageId":"65","endLine":61,"endColumn":33},{"ruleId":"51","severity":1,"message":"66","line":191,"column":11,"nodeType":"53","messageId":"54","endLine":191,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":305,"column":35,"nodeType":"57","messageId":"61","endLine":305,"endColumn":37},{"ruleId":"59","severity":1,"message":"60","line":315,"column":40,"nodeType":"57","messageId":"61","endLine":315,"endColumn":42},{"ruleId":"59","severity":1,"message":"60","line":374,"column":15,"nodeType":"67","messageId":"68","endLine":374,"endColumn":22},{"ruleId":"59","severity":1,"message":"60","line":395,"column":15,"nodeType":"67","messageId":"68","endLine":395,"endColumn":22},{"ruleId":"69","severity":1,"message":"70","line":29,"column":5,"nodeType":"71","messageId":"72","endLine":32,"endColumn":6},{"ruleId":"69","severity":1,"message":"70","line":30,"column":5,"nodeType":"71","messageId":"72","endLine":36,"endColumn":6},{"ruleId":"51","severity":1,"message":"73","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":13},{"ruleId":"69","severity":1,"message":"70","line":8,"column":5,"nodeType":"71","messageId":"72","endLine":12,"endColumn":6},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'requirementsCourses', 'requirementsCourses', 'i', 'selectiveCourses', 'selectiveCourses', 'i', 'deepCourses', 'deepCourses', 'GECourses', 'GECourses'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'newState' is assigned a value but never used.","ReturnStatement","expectedReturnValue","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'axios' is defined but never used."]