[{"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\index.js":"1","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\initial-data.js":"2","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\column.jsx":"3","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\InsertModal.jsx":"4","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\UpdateModal.jsx":"5","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\DeleteModal.jsx":"6","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\task.jsx":"7"},{"size":8535,"mtime":1619999245721,"results":"8","hashOfConfig":"9"},{"size":1652,"mtime":1619999245722,"results":"10","hashOfConfig":"9"},{"size":1580,"mtime":1619999245721,"results":"11","hashOfConfig":"9"},{"size":5559,"mtime":1619999245720,"results":"12","hashOfConfig":"9"},{"size":5581,"mtime":1619927929343,"results":"13","hashOfConfig":"9"},{"size":2256,"mtime":1619927929342,"results":"14","hashOfConfig":"9"},{"size":1681,"mtime":1619999245723,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1lfcmr1",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\index.js",["32","33","34","35","36","37","38"],"import React from 'react';\nimport ReactDOM, { render } from 'react-dom';\nimport initialData from './initial-data'\nimport Column from './column'\nimport InsertModal from './InsertModal'\nimport DeleteModal from './DeleteModal'\nimport UpdateModal from './UpdateModal'\nimport styled from 'styled-components'\nimport {DragDropContext} from 'react-beautiful-dnd'\nimport axios from 'axios'\n\n\n\nconst Container = styled.div`\n  display: flex\n`;\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = initialData;\n    //console.log(initialData)\n  }\n\n\n  componentDidMount(){\n    //console.log(\"componentDidMount\")\n    //console.log(\"old state\",initialData)\n    const newState  = {\n      ...this.state,\n      showCourseModal: false,\n      selectedCourse: null,\n    }\n\n\n    let requirementsCourses = null\n    let requiredCourseNames = []  \n\n    let selectiveCourses = null\n    let selectiveCourseNames = []\n\n    let deepCourses = null\n    let deepCourseNames = []\n    \n    axios.get('http://localhost:5000/api/courses')\n    .then((response) => {\n      // handle success\n      console.log(\"courses api: \", response.data);\n      //console.log(\"task\",newState.tasks)\n      \n      for(var i=0; i < 3; i++){\n        response.data[i].map((item)=>{\n        //console.log(item.course)\n        const course = item.course\n        \n        const obj = new Object()\n        obj.id = item.course\n        obj.courseName = item.course\n        obj.title = item.title\n        obj.category = item.category\n        obj.dept_name = item.dept_name\n        obj.description = item.description\n        obj.credit = item.credit\n        obj.prerequisite = item.prerequisite\n        //obj.title = item.title\n        if(i === 0){\n          requiredCourseNames.push(course)\n          requirementsCourses ={\n          ...requirementsCourses,\n          [course]:obj\n          }\n        }else if(i === 1){\n          deepCourseNames.push(course)\n          deepCourses ={\n          ...deepCourses,\n          [course]:obj\n          }\n        }else{\n          selectiveCourseNames.push(course)\n          selectiveCourses ={\n          ...selectiveCourses,\n          [course]:obj\n          }\n        }\n     \n        })\n      }\n\n      //console.log(\"requirmentObj: \", requirementsCourses)\n      \n      //newState.tasks = Object.assign({},requirementsCourses)\n\n\n      const columnObj1 = {\n        \"id\":\"column-1\",\n        \"title\":\"Requirements\",\n        \"taskIds\" : requiredCourseNames\n      }\n\n      const columnObj2 = {\n        \"id\":\"column-2\",\n        \"title\":\"Deep Course\",\n        \"taskIds\" : deepCourseNames\n      }\n\n      const columnObj3 = {\n        \"id\":\"column-3\",\n        \"title\":\"Selectives\",\n        \"taskIds\" : selectiveCourseNames\n      }\n      newState.columns['column-1'] = columnObj1\n      newState.columns['column-2'] = columnObj2\n      newState.columns['column-3'] = columnObj3\n\n      const allCourses ={\n        ...requirementsCourses,\n        ...selectiveCourses,\n        ...deepCourses\n      }\n\n      console.log(allCourses)\n      console.log(requirementsCourses)\n      newState.tasks = allCourses\n\n      this.setState(newState,()=>{\n        console.log(\"update complete\", this.state)\n      })\n      \n    })\n    .catch(function (error) {\n      // handle error\n      console.log(error);\n    })\n    .then(function () {\n      // always executed\n    });\n\n    \n\n    \n        \n  }\n\n\n  setSelectedCourse = (course) =>{\n      const newState = {\n        ...this.state,\n        selectedCourse: course,\n        showCourseModal: true,\n      }\n\n      this.setState(newState, ()=>{\n        console.log(\"from setSelectedCourse func\", this.state)\n      })\n  }\n  \n  setNewState = (newState) =>{\n      this.setState(newState, ()=>{\n        console.log(\"from index\", this.state)\n      })\n  }\n\n  toggleInfoModal = () =>{\n    const newState = {\n      ...this.state,\n      showCourseModal: !this.state.showCourseModal\n    }\n  }\n  \n\n  onDragStart = () =>{\n    /*\n    document.body.style.color = 'Orange'\n    document.body.style.transition = 'background-color 0.3s ease'\n    */\n  }\n\n  onDragUpdate = update =>{\n    /*\n    const {destination} = update;\n    const opacity = destination? destination.index / Object.keys(this.state.tasks).length:0\n    document.body.style.backgroundColor = `rgba(153,141,217, ${opacity})`\n    */\n  }\n\n\n\n  onDragEnd = result =>{\n\n    console.log(\"from ondrag end\", this.state)\n\n    const {destination, source, draggableId} = result;\n    document.body.style.color = 'inherit'\n    document.body.style.backgroundColor = 'inherit'\n    console.log(\"destination\",destination);\n    console.log(\"source\",source)\n    console.log(\"draggableId\",draggableId)\n    console.log(\"\\n\\n\")\n  \n    \n\n    if(!destination){\n      \n      return;\n      \n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index){\n\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    console.log(\"start\",start)\n    console.log(\"finish\", finish)\n    \n    if(start === finish){\n   \n    const newTaskIds = Array.from(start.taskIds);\n    newTaskIds.splice(source.index,1);\n    newTaskIds.splice(destination.index,0,draggableId);\n\n    const newColumn={\n      ...start,\n      taskIds:newTaskIds,\n    };\n\n    const newState={\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      }\n    }\n\n    this.setState(newState)\n    return;\n   }\n\n\n    // Moving from one list to another\n    console.log(\"hit\")\n    const startTaskIds = Array.from(start.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds\n    }\n\n    const finishTaskIds = Array.from(finish.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId); //insert\n    const newFinish = {\n      ...finish,\n      taskIds:finishTaskIds\n    }\n\n    const newState = {\n      ...this.state,\n      columns:{\n        ...this.state.columns,\n        [newStart.id]:newStart,\n        [newFinish.id]: newFinish,\n        \n      }\n    }\n\n    this.setState(newState)\n  }\n\n  render(){\n    return (\n      <div>\n      {this.state.showCourseModal? (<InsertModal></InsertModal>):(null)}\n      <DragDropContext \n        onDragStart={this.onDragStart}\n        onDragUpdate={this.onDragUpdate}\n        onDragEnd={this.onDragEnd}\n      >\n        <Container>\n          {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum <= 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks} data={this.state} setNewState={this.setNewState} setSelectedCourse={this.setSelectedCourse} />\n            }else{\n              return;\n            }\n            \n          })}\n        </Container>\n\n\n        <Container>\n        {this.state.columnOrder.map((columnId)=>{\n            //console.log(\"columnId\",columnId)\n            let theIdNum = columnId.match(/\\d/g);\n            theIdNum = parseInt(theIdNum.join(\"\"));\n            \n            //console.log(\"theIdNum\",theIdNum);\n            const column = this.state.columns[columnId];\n            //console.log(\"column\",column)\n\n            if(theIdNum > 4){\n              const tasks = column.taskIds.map(taskId => this.state.tasks[taskId])\n              return <Column key={column.id} column={column} tasks={tasks}/>\n            }else{\n              return;\n            }\n            \n          })}\n\n        </Container>\n\n        <Container>\n        <InsertModal></InsertModal>\n        <DeleteModal></DeleteModal>\n        <UpdateModal></UpdateModal>\n       \n        </Container>\n      \n      </DragDropContext>\n\n     \n      </div>\n      \n\n    \n    )\n\n  }\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n\n\n/**\n\n1. call an api /courses\n\n\n1st[] = requirments\n2nd[] = eletives\n3rd[] = Deep course\n\n\n[  [{....}] , [{....}] , [{....}]  ] \n\n\n */","C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\initial-data.js",[],"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\column.jsx",[],"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\InsertModal.jsx",[],"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\UpdateModal.jsx",[],"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\DeleteModal.jsx",[],"C:\\Personal_Data\\CS157C_NoSQL\\Spartan_Planner\\CS157C-team8\\spartan_planner\\client\\src\\task.jsx",["39"],"import React from 'react'\nimport styled from 'styled-components'\nimport {Draggable} from 'react-beautiful-dnd'\nimport InsertModal from './InsertModal'\n\n\nconst Container = styled.div`\n    border: 1px solid lightgray;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom:8px;\n    background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n    display : flex;\n\n`;\n\n\nconst Handle = styled.div`\n    width: 20px;\n    height: 20px;\n    background-color :orange;\n    border-radius: 4px;\n    margin-right: 8px;\n`\n\n\nexport default class Task extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = props\n        //console.log(\"from task class\",props)\n        //this.onClickHandler = this.onClickHandler.bind(this)\n    \n    }\n\n    onClickHandler = () =>{\n        console.log(\"from task class\",this.state)\n        this.state.setSelectedCourse(this.state.task)\n        //alert(`Hello`)\n    }\n\n    \n    render(){\n        \n        return (\n        <Draggable \n            draggableId={this.props.task.id} \n            index={this.props.index}\n        >\n            {(provided, snapshot)=>(\n                <div onClick = {this.onClickHandler}\n                >\n                    <Container\n                    {...provided.draggableProps}\n                   \n                    ref={provided.innerRef}\n                    isDragging={snapshot.isDragging}\n                    >\n                    <Handle  {...provided.dragHandleProps}/>\n                    {this.props.task.courseName}\n                    </Container>\n                </div>\n                \n            )}\n            \n        </Draggable>\n        \n        )\n    }\n}",{"ruleId":"40","severity":1,"message":"41","line":2,"column":20,"nodeType":"42","messageId":"43","endLine":2,"endColumn":26},{"ruleId":"44","severity":1,"message":"45","line":52,"column":30,"nodeType":"46","messageId":"47","endLine":86,"endColumn":10},{"ruleId":"48","severity":1,"message":"49","line":52,"column":36,"nodeType":"46","messageId":"50","endLine":52,"endColumn":38},{"ruleId":"51","severity":1,"message":"52","line":56,"column":21,"nodeType":"53","messageId":"54","endLine":56,"endColumn":33},{"ruleId":"40","severity":1,"message":"55","line":164,"column":11,"nodeType":"42","messageId":"43","endLine":164,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":295,"column":15,"nodeType":"56","messageId":"57","endLine":295,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":316,"column":15,"nodeType":"56","messageId":"57","endLine":316,"endColumn":22},{"ruleId":"40","severity":1,"message":"58","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":19},"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'requirementsCourses', 'requirementsCourses', 'i', 'deepCourses', 'deepCourses', 'selectiveCourses', 'selectiveCourses'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'newState' is assigned a value but never used.","ReturnStatement","expectedReturnValue","'InsertModal' is defined but never used."]